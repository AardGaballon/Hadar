<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, September 14, 2016, 12:00 PM -->
<!-- MuClient version 5.01 -->

<!-- Plugin "Hadar_Double_Predictor" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Hadar_Double_Predictor"
   author="Hadar"
   id="dbcf98147af347b80d74fc70"
   language="Lua"
   purpose="predict double via a command"
   date_written="2016-09-14 11:59:02"
   requires="4.00"
   version="2.2"
   >
<description trim="y">
<![CDATA[
Just use the command predict to take a guess at the next hour of double
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^Mob Deaths\s+:\s+([+-]?[0-9,]+)\s+([+-]?[0-9,]+)$"
   regexp="y"
   send_to="12"
   script="MobMath"
   sequence="100"
  >
  <send></send>
  </trigger>
  <trigger
   enabled="y"
   match="^ \* The system time is\s+: (\d+):(\d+):(\d+) - \w+ (\d+) (\w+), (\d+)"
   regexp="y"
   send_to="12"
   script="LetItGo"
   sequence="100"
  >
  <send></send>
  </trigger>
  <trigger
   enabled="y"
   match="^ \* Aardwolf last restarted on \: (\d+)\:(\d+)\:(\d+) \- \w+ (\d+) (\w+)\, (\d+)"
   regexp="y"
   send_to="12"
   script="GetTheDate"
   sequence="100"
  >
  <send>
</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="predict *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>HadarDouble={}

HadarDouble.Player='%1'
HadarDouble.VI="no"
Send("gamestat 5")
Send("realtime")</send>
  </alias>
  
  <alias match="^(?:had|double) help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
	<alias
   script="doubleSet"
   match="^setdouble$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
</aliases>


<script>
<![CDATA[
require "serialize"


function OnPluginSaveState ()
	SetVariable ("HadarDoubleString", serialize.save ("HadarDoubleString"))
	SetVariable ("doublePastFirstInstall", "true")
end -- function OnPluginSaveState


function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
	
	print("had help (to see all of hadar's plugin helpfiles), or double help to just see this one")
  
	OnPluginEnable ()
end

function OnPluginEnable ()
	
	HadarDouble = {}
	
	if GetVariable ("doublePastFirstInstall") == "true" then
		assert (loadstring (GetVariable ("HadarDoubleString") or "")) ()
	else
		buildInitial()
	end

end

function buildInitial()
	HadarDoubleString = "@G\\}@R %s@w Kills Left @G{/ @w(Avg @R%s @wkpm) @G\\}@w Hour of Double in about: @R%s@wd @R%s@wh @R%s@wm @G{/@w"
	SaveState()
end

function doubleSet()
	HadarBackup = HadarDoubleString
	HadarDoubleString = utils.inputbox ("Needs a total of 5 %s\n1)kills left\n2)avg kpm\n3)hours\n4)minutes\n5)seconds", "Look of Double Predictor", HadarDoubleString, "Courier", 9)
	if HadarDoubleString ~= nil then
		SendNoEcho("echo double will look like: "..HadarDoubleString)
	else
		HadarDoubleString = HadarBackup
	end
end


function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

function timeDiff(t2,t1,script)
	local d1,d2,carry,diff = os.date('*t',t1),os.date('*t',t2),false,{}
	local colMax = {60,60,24,os.date('*t',os.time{year=d1.year,month=d1.month+1,day=0}).day,12}
	d2.hour = d2.hour - (d2.isdst and 1 or 0) + (d1.isdst and 1 or 0) -- handle dst
	for i,v in ipairs({'sec','min','hour','day','month','year'}) do
		diff[v] = d2[v] - d1[v] + (carry and -1 or 0)
		carry = diff[v] < 0
		if carry then diff[v] = diff[v] + colMax[i] end
	end
	for i,v in pairs(diff) do
		script[i] = v
	end
	return diff
end

function round(num, idp)
    local mult = 10^(idp or 0)
    if num >= 0 then return math.floor(num * mult + 0.5) / mult
    else return math.ceil(num * mult - 0.5) / mult end
end

function MobMath(name, line, wildcards)
	HadarDouble.KillsSinceReboot = string.gsub(wildcards[1],",","")
	HadarDouble.KillsSinceTracked = string.gsub(wildcards[2],",","")
	local number = HadarDouble.KillsSinceTracked/1000000
	local doubround = math.floor(number)
	HadarDouble.ThisMillion = doubround*1000000
	HadarDouble.NextMillion = HadarDouble.ThisMillion+1000000
	HadarDouble.KillsNeeded = HadarDouble.NextMillion-HadarDouble.KillsSinceTracked
	HadarDouble.KillsCompleted = HadarDouble.KillsSinceTracked-HadarDouble.ThisMillion
end

function GetTheDate(name, line, wildcards)
	local month=wildcards[5]
	local DoubleAardRebootMonth

	if month=="Jan" then DoubleAardRebootMonth=1 end
	if month=="Feb" then DoubleAardRebootMonth=2 end
	if month=="Mar" then DoubleAardRebootMonth=3 end
	if month=="Apr" then DoubleAardRebootMonth=4 end
	if month=="May" then DoubleAardRebootMonth=5 end
	if month=="Jun" then DoubleAardRebootMonth=6 end
	if month=="Jul" then DoubleAardRebootMonth=7 end
	if month=="Aug" then DoubleAardRebootMonth=8 end
	if month=="Sep" then DoubleAardRebootMonth=9 end
	if month=="Oct" then DoubleAardRebootMonth=10 end
	if month=="Nov" then DoubleAardRebootMonth=11 end
	if month=="Dec" then DoubleAardRebootMonth=12 end

	local t1 = os.time{year=wildcards[6], month=DoubleAardRebootMonth, day=wildcards[4],hour=wildcards[1],minute=wildcards[2],second=wildcards[3]}
	local changetime = os.time()+10800
	local timemin = (changetime-t1)/60
	local totalmin = round(timemin)

	HadarDouble.TotalMin=totalmin
end

function LetItGo(name, line, wildcards)
	if HadarDouble.TotalMin<=0 then
		HadarDouble.MobsKilledPerMinute=200
	else
		HadarDouble.MobsKilledPerMinute=math.floor(HadarDouble.KillsSinceReboot/HadarDouble.TotalMin)
	end


	HadarDouble.MinutesLeft=math.floor(HadarDouble.KillsNeeded/HadarDouble.MobsKilledPerMinute)
	HadarDouble.DaysLeft=math.floor(HadarDouble.MinutesLeft/1440)
	HadarDouble.LeftoverMinutes=HadarDouble.MinutesLeft - (HadarDouble.DaysLeft*1440)
	HadarDouble.HoursLeft=math.floor(HadarDouble.LeftoverMinutes/60)
	local quickmath = HadarDouble.HoursLeft*60
	HadarDouble.MinutesLeft=HadarDouble.LeftoverMinutes-quickmath

	HadarDouble.Data = string.format(HadarDoubleString,HadarDouble.KillsNeeded,HadarDouble.MobsKilledPerMinute,HadarDouble.DaysLeft,HadarDouble.HoursLeft,HadarDouble.MinutesLeft)
	SendSpecial(HadarDouble.Player.." "..HadarDouble.Data )
end




function HadarHelp()
	ColourNote("#159FE5","","+---------------------------------","Green","","[","Cyan","","D","Teal","","ouble ","Cyan","","P","Teal","","redictor","Green","","]","#159FE5","","---------------------------------+")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," Predict <Channel>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," Outputs an estimate to a channel when double might happen"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," setdouble"),"#159FE5","","-","#F1D566","",string.format("%-64s"," lets you change what the output will look like"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","+"..string.rep("-",84).."+")
end


]]>
</script> 

</muclient>
