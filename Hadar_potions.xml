<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Hadar_potion_Tracker"
   author="Hadar"
   id="8b614de57c14606ab6f4d4f6"
   language="Lua"
   purpose="Track potions display to window, with autoquaffing"
   date_written="2016-11-30"
   requires="4.98"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[

I liked abelinc/lunks version so i kept the qff alias - rest of code is mine

Install this plugin to automatically quaff a potion when your health falls 
below a preset limit.

qff                     ---> Displays the current values of variables

qff bag *               ---> Sets the container to get potions from to *

qff hp pot *            ---> Sets hp potion to *

qff mn pot *            ---> Sets mn potion to *

qff mv pot *            ---> Sets mv potion to *

qff hp per *            ---> Sets the HP percent you must fall below to quaff to *

qff mn per *            ---> Sets the MN percent you must fall below to quaff to *

qff mv per *            ---> Sets what MV percent you must fall below to quaff to *
							   
qff on/off              ---> Turns the actions of the plugin on or off

qff debug on/off  ---> Turns debug information to the screen on/off
]]>
</description>

</plugin>

<include name="constants.lua"/>

<triggers>
  <trigger
   enabled="y"
   match="^Auction: (.*) is auctioning (.*) \(Level .*, Num .*\)\. Current bid is .*\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^Auction: (.*) SOLD to (.*) for .* gold\.$"
   regexp="y"
   send_to="12"
   script="potionaddauct"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You buy (\d+) \* (.*) from .* for ([+-]?[0-9,]+) gold\.$"
   regexp="y"
   send_to="12"
   script="potionadd"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You buy (?:a|A) (.*) from .* for ([+-]?[0-9,]+) gold\."
   regexp="y"
   send_to="12"
   script="potionaddsingle"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You drop (\d+) \* (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You drop (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You eat (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You get (\d+) \* (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionaddsingle"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You get (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionaddsingle"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You give (\d+) \* (.*) to .*\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You give (.*) to .*\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You quaff (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You receive (\d+) \* (.*) from .*\.$"
   regexp="y"
   send_to="12"
   script="potionadd"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You receive (.*) from .*\.$"
   regexp="y"
   send_to="12"
   script="potionaddsingle"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You recite (.*)\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You sell (\d+) \* (.*) to .* for .* gold\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^You sell (.*) to .* for .* gold\.$"
   regexp="y"
   send_to="12"
   script="potionsubtract"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="y"
   match="^\((?: )?(\d+)\) (?:\(M\))(?:\(G\))?(?:\(H\))? (.*) \(\d+\)$"
   regexp="y"
   send_to="12"
   script="potionset"
   sequence="100"
  >
  </trigger>
</triggers>

<aliases>

  <alias
   name="autoquaff"
   script="qff_settings"
   match="^qff ?(hp per|mn per|mv per|hp pot|mn pot|mv pot|bag|on|off|help|debug|add mv pot)?( [a-z0-9]+)?"
   enabled="y"
   regexp="y"
   ignore_case="y"
   sequence="100"
  >
  </alias>
   
</aliases>

<script>
<![CDATA[
dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "checkplugin"
require "serialize"
require "movewindow"
require "gmcphelper"
require "miniwin"
require "HadarLuaCommon"

--Lets figure out Miniwindow stuff!

win = Miniwin:new{name="Hadar_Potions"..GetPluginID()}
databasename = GetPluginInfo(GetPluginID (), 20) .. "HadarPotions.db"
db = "Potions"


--hey look the real code!

local _,pname = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.base.name")

function OnPluginBroadcast(msg, id, name, text)
  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "char.vitals") then
		res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
		luastmt = "gmcpdata = " .. gmcparg
        assert (loadstring (luastmt or "")) ()
	end --end text viatals
  end -- end gmcp handler
end --end pluginbroadcast

function potsubtract(kind,amt)
--
	if kind=="heal" then 
		potionstats["healammount"]=potionstats["healammount"] - amt
	elseif kind=="mana" then
		potionstats["manaammount"]=potionstats["manaammount"] - amt
	elseif kind=="move" then
		potionstats["moveammount"]=potionstats["moveammount"] - amt
	end
--
end

function potaddition(kind,amt)
--
	if kind=="heal" then 
		potionstats["healammount"]=potionstats["healammount"] + amt
	elseif kind=="mana" then
		potionstats["manaammount"]=potionstats["manaammount"] + amt
	elseif kind=="move" then
		potionstats["moveammount"]=potionstats["moveammount"] + amt
	end
--
end

function potionaddsingle(name, line, wildcards)

local item = wildcards[1]
local ammt = 1

	if ismember(item,allhealpotions) then
		potaddition("heal",ammt)
	elseif ismember(item,allmanapotions) then
		potaddition("mana",ammt)
	elseif ismember(item,allmovepotions) then
		potaddition("move",ammt)
	end
	
	print(potionstats["healammount"])
end -- end potaddsingle

function potionadd()
end -- end potionadd

function potionsubtract()
end -- end potshowtotal

function potionaddauct()
end -- end potionaddauct

function potionset()
end -- end potshowtotal

function addpot()
end -- addpot

function delpot()
end -- delpot

function OnPluginInstall ()
	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
  
	prepareDatabase()
	OnPluginEnable ()

end -- endinstall

function OnPluginEnable ()
assert (loadstring (GetVariable ("allhealpotions") or "")) ()
assert (loadstring (GetVariable ("allmanapotions") or "")) ()
assert (loadstring (GetVariable ("allmovepotions") or "")) ()
end -- endenable

function OnPluginSaveState ()
SetVariable ("allhealpotions", serialize.save ("allhealpotions"))
SetVariable ("allmanapotions", serialize.save ("allmanapotions"))
SetVariable ("allmovepotions", serialize.save ("allmovepotions"))
end --end save state


function qff_settings (name, line, wildcards)
			if wildcards [1] == "add mv pot" then
				movepotion = utils.inputbox ("Copy/Paste name of move potion", "Add Potion", "nil", "Courier", 9)
				putDatabase("move",movepotion)
			elseif wildcards [1] == "add hp pot" then
				healpotion = utils.inputbox ("Copy/Paste name of move potion", "Add Potion", "nil", "Courier", 9)
				putDatabase("heal",healpotion)
			elseif wildcards [1] == "add mn pot" then
				manapotion = utils.inputbox ("Copy/Paste name of move potion", "Add Potion", "nil", "Courier", 9)
				putDatabase("mana",manapotion)
			end
			
	--SaveState()
end -- autoquaff_settings

--[[ +-------------------------------------------------------+
	 |	    	MMMM Database                                |
	 +-------------------------------------------------------+ ]]
	 
function putDatabase(type,name)
	DatabaseOpen(db, databasename, 6)
	status = DatabaseExec(db, "INSERT INTO potions VALUES(null, 'move', '"..name.."')")
	DatabaseFinalize(db)
	DatabaseClose(db)
end

function prepareDatabase()
	-- Create database if its not already present
	
	DatabaseOpen(db, databasename, 6)
	
	status = DatabaseExec(db, [[
			CREATE TABLE IF NOT EXISTS potions(
				ID					INTEGER NOT NULL,
				type				TEXT DEFAULT 'empty',
				name				TEXT DEFAULT 'empty',
				
				unique(id)
			);
			
		]])
		
	if status ~= 0 then
		ColourNote("white", "red", centerText("Error creating potion database : " .. DatabaseError(db), 60))
	end
	
	DatabaseFinalize(db)
	
	status = DatabasePrepare(db, "SELECT * FROM potions")
	
	if status ~= 0 then
		ColourNote("white", "red", centerText("Error checking for dummy potions : " .. DatabaseError(db), 60))
	else
		if DatabaseStep(db) == 101 then
			DatabaseFinalize(db)
			status = DatabaseExec(db, "INSERT INTO potions VALUES(1, 'default')")
			
			if status ~= 0 then
				ColourNote("white", "red", centerText("Error inserting dummy set : " .. DatabaseError(db), 60))
			end
		end	
	end
	
	DatabaseFinalize(db)
	DatabaseClose(db)
end

]]>
</script>

</muclient>
