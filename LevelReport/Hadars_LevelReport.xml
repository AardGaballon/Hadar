<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, August 14, 2018, 10:19 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "LevelReport" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LevelReport"
   author="Hadar"
   id="1a36da4e764254b16bd1e33f"
   language="Lua"
   purpose="To report time between levels/pup"
   save_state="y"
   date_written="2018-08-14 10:18:40"
   requires="4.00"
   version="1.90"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   match="^\{skillgain\}(?<sn>[0-9]{1,3})\,(?<perc>[0-9]{1,3})$"
   omit_from_output="y"
   regexp="y"
   script="SkillGain"
   sequence="100"
  >
  </trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^Congratulations, hero. You have increased your powers!"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_level"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^Lucky! You gain an extra (\d+) training {sessions|session}!$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_train_bonus"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^You gain (\d+) extra trains daily blessing bonus.$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_train_bonus"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^You gain (\d+) train(?s)."
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_train_add"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="y"
		match="^You gain a bonus (.*) point!$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="level_Stat_Add"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="y"
		match="^You gain ([0-9]{1,3}) hit points, ([0-9]{1,3}) mana, ([0-9]{1,3}) moves, ([0-9]{1,3}) practices and ([0-9]{1,3}) trains\."
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="gain_Level"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="y"
		match="^You gain (\d+) extra train.? daily blessing bonus"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="level_bonus_train"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="y"
		match="^Lucky! You gain an extra (\d+) training session(?s)!$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="level_bonus_train"
	>
	</trigger>
	
	
		<!-- Recovery Capture -->
	<trigger
		name="RecoveriesStart"
		enabled="n"
		match="^\{recoveries\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		send_to="12"
	>
	<send>
		EnableTrigger("RecoveriesStart", false)
		EnableTrigger("RecoveriesCapture", true)
		EnableTrigger("RecoveriesEnd", true)
	</send>
	</trigger>

	<trigger
		name="RecoveriesCapture"
		enabled="n"
		match="^[0-9]+,[^,]+,[0-9]+$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>

	<trigger
		name="RecoveriesEnd"
		enabled="n"
		match="^\{\/recoveries\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		send_to="12"
	>
	<send>
		EnableTrigger("RecoveriesStart", false)
		EnableTrigger("RecoveriesCapture", false)
		EnableTrigger("RecoveriesEnd", false)
	</send>
	</trigger>
	
		<!-- slist Capture -->
	<trigger
		name="SListStart"
		group="SpellupCapture"
		script="begin_sList"
		enabled="n"
		match="\{spellheaders( learned)?\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>

	<trigger
		name="SListEnd"
		group="SpellupCapture"
		script="stop_sList"
		enabled="n"
		match="^{\/spellheaders\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>
	<trigger
		name="SListCapture"
		group="SpellupCapture"
		enabled="n"
		match="^(\d+),(.*),(\d+),(\d+),(\d+),([+-]?[0-9,]+),(\d+)$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="SlistUpdate"
	>
	</trigger>
	
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   script="level_Report_Build"
   match="^levelreport ?(.*)?$"
   enabled="y"
   regexp="y"
   group="levelreports"
   sequence="100"
  >
  </alias>
  <alias
   match="^pupreport ?(.*)?$"
   enabled="y"
   regexp="y"
   group="pupreports"
   sequence="100"
   script="Pup_report_build"
  >
  </alias>
  <alias
   match="^levelshow (?:(\d+|all))?(?:\s(.*))?$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="Level_show"
  >
  </alias>
    <alias match="^(?:had|level) help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
</aliases>

<script>
<![CDATA[
dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "HadarLuaCommon"
require "serialize"
require "HadarLevelReport"

	LevelReportVariables = {}
	local currentState = -1 -- uninitialized
	local slistCommandSent = false
	local IAC = 255
	local SB  = 250
	local TELOPT = 102
	local SE  = 240
	local SKILLGAINS = 8
	local GLOBAL_TAG_MUTE = 50
	
	levelSkillSpells = {}
	levelinfo = {}
	mylevelreport = {}
	leveltable = {}

function gmcp(what) --pulled from gmcp helper, lets see if fixes older version
	result, value = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", what)
	if result ~= 0 then
		ColourNote ("orange", "", "Warning: Could not get GMCP value for " .. what)
		return nil
	else
		local luastmt = "ret = " .. value
		assert (loadstring (luastmt or "")) ()
		return ret
	end -- if
end -- gmcp

function levelTimeDiff(t2,t1,script)
	local d1,d2,carry,diff = os.date('*t',t1),os.date('*t',t2),false,{}
	local colMax = {60,60,24,os.date('*t',os.time{year=d1.year,month=d1.month+1,day=0}).day,12}
	d2.hour = d2.hour - (d2.isdst and 1 or 0) + (d1.isdst and 1 or 0) -- handle dst
	for i,v in ipairs({'sec','min','hour','day','month','year'}) do
		diff[v] = d2[v] - d1[v] + (carry and -1 or 0)
		carry = diff[v] < 0
		if carry then diff[v] = diff[v] + colMax[i] end
	end
	for i,v in pairs(diff) do
		script[i] = v
	end
	return diff
end

function OnPluginBroadcast(msg, id, name, text)

  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "char.status") then
		res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
		
				assert(loadstring("LoadInfo = "..gmcparg or "")) ()
				currentState = tonumber(gmcp("char.status.state"))
		
		for i,v in pairs(LoadInfo) do
		
			if i == "level" then
			LevelReportVariables.level=v 
			end
			if i == "level" then 
				if tonumber(v) > 199 then
					EnableTrigger("PupTriggers", true)
					EnableTrigger("LevelTriggers", false)
				else
					EnableTrigger("PupTriggers", false)
					EnableTrigger("LevelTriggers", true)
				end
			end
			
		end -- end for
		
	end --end if char status
	
  end
end

											 
----------------------------------------------------------------------------------------------------
--										      End GMCP											  --
--																								  --
--								         Start Standard Stuff									  --
----------------------------------------------------------------------------------------------------

function OnPluginSaveState ()
	SetVariable ("LevelReportVariables", "LevelReportVariables = " .. serialize.save_simple (LevelReportVariables))
	SetVariable ("levelSkillSpells", "levelSkillSpells = " .. serialize.save_simple (levelSkillSpells))
	SetVariable ("leveltable", "leveltable = " .. serialize.save_simple (leveltable))
	SetVariable ("levelinfo", "levelinfo = " .. serialize.save_simple (levelinfo))
	SetVariable ("pastfirstinstall", "true")
	
end -- function OnPluginSaveState


function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
	
	if (currentState == -1) then
		currentState = 0 -- sent request
	end
	
	SendNoEcho("protocol gmcp sendchar")
	
	print("had help (to see all of hadar's plugin helpfiles), or level help to just see this one")
  
	OnPluginEnable ()
end

function OnPluginEnable ()
	
	LevelReportVariables = {}
	levelSkillSpells = {}
	leveltable = {}
	levelinfo = {}
	
	
	if GetVariable ("pastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("LevelReportVariables") or "")) ()
		assert (loadstring (GetVariable ("levelSkillSpells") or "")) ()
		assert (loadstring (GetVariable ("leveltable") or "")) ()
		assert (loadstring (GetVariable ("levelinfo") or "")) ()
	else
		buildInitialColors()
		buildFirstSpellList()
	end

end

function buildInitialColors()
	LevelReportVariables.pupColorFirst = "@G"
	LevelReportVariables.pupColorSecond = "@g"
	LevelReportVariables.pupBrac = "@R"
	LevelReportVariables.pupColorNum = "@w"
	LevelReportVariables.pupColorTime = "@W"
	LevelReportVariables.pupColorBracSecond = "@w" 
	LevelReportVariables.pupColorPlus = "@W"
	LevelReportVariables.pupColorStat = "@w"

	LevelReportVariables.levelColorFirst = "@G"
	LevelReportVariables.levelColorSecond = "@g"
	LevelReportVariables.levelBrac = "@R"
	LevelReportVariables.levelColorNum = "@w"
	LevelReportVariables.levelColorTime = "@W"
	LevelReportVariables.levelColorBracSecond = "@w" 
	LevelReportVariables.levelColorPlus = "@W"
	LevelReportVariables.levelColorStat = "@w"
	LevelReportVariables.initilized = 1
	LevelReportVariables.channel = "gt"
	mylevelepoch()
	mylevelconvert()
end

----------------------------------------------------------------------------------------------------
--										  End Standard Stuff									  --
--																								  --
--									    Begin Level/PUP Functions								  --
----------------------------------------------------------------------------------------------------

function Pup_report_build(name, line, wildcards)
local channel
	if wildcards[1] == nil then
		channel = LevelReportVariables.channel
	else
		channel = wildcards[1]
	end
	
	
	pupreport(channel,LevelReportVariables.pupColorFirst,LevelReportVariables.pupColorSecond,LevelReportVariables.pupBrac,LevelReportVariables.pupColorNum,LevelReportVariables.pupColorTime,LevelReportVariables.pupColorBracSecond,LevelReportVariables.pupColorPlus,LevelReportVariables.pupColorStat)
end

function Pup_level()
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	levelinfo.bonustrain = 0
	levelinfo.bonustraintwo = 0
	DoAfterSpecial(0.5, 'Execute("pupreport echo")', sendto.script)
end

function Pup_train_bonus(name, line, wildcards)
	puptrainbonus(wildcards[1])
end

function Pup_train_add(name, line, wildcards)
	puptrainadd(wildcards[1])
end

function level_Report_Build(name, line, wildcards)
local channel

	if wildcards[1] == nil then
		channel = LevelReportVariables.channel
	else
		channel = wildcards[1]
	end
	
	
	local report = tonumber(LevelReportVariables.level)
	
	
	
	local test = levelreport(LevelReportVariables.level,channel,LevelReportVariables.levelColorFirst,LevelReportVariables.levelColorSecond,LevelReportVariables.levelBrac,LevelReportVariables.levelColorNum,LevelReportVariables.levelColorTime,LevelReportVariables.levelColorBracSecond,LevelReportVariables.levelColorPlus,LevelReportVariables.levelColorStat)
	leveltable[report] = mylevelreport.message
	
	
	SendNoEcho(channel.." "..leveltable.report)
end

function level_Stat_Add(name, line, wildcards)
	local stat = wildcards[1]
	if stat == "Strength" then
		stat = "Str"
	elseif stat == "Intelligence" then
		stat = "Int"
	elseif stat == "Wisdom" then
		stat = "Wis"
	elseif stat == "Dexterity" then
		stat = "Dex"
	elseif stat == "Constitution" then
		stat = "Con"
	elseif stat == "Luck" then
		stat = "Lck"
	end
	bonusstatadd(stat)
end

function gain_Level(name, line, wildcards)
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	statadd(wildcards[1],wildcards[2],wildcards[3],wildcards[4],wildcards[5])
	
	DoAfterSpecial(0.5, 'Execute("levelreport "..LevelReportVariables.channel)', sendto.script)
end

function level_bonus_train(name, line, wildcards)
	trainadd(wildcards[1])
end

function Level_show(name, line, wildcards)
	local level = wildcards[1]
	local report = tonumber(level)
	local channel
	if wildcards[2]=="" then
		channel = "gt"
	else
		channel = wildcards[2]
	end
	
	if level=="all" then
		if leveltable~=nil then
			for k,v in pairs(leveltable) do
				print(v)
			end
		else
			print("You have not leveled yet, go out and level!")
		end
	else
		SendNoEcho(channel.." "..leveltable.report)
	end
end


----------------------------------------------------------------------------------------------------
--									  End Level/PUP Functions	   							      --
--																								  --
--									    Begin Slist Stuff										  --
----------------------------------------------------------------------------------------------------

function SkillGain(name, line, wildcards)
	local one = tonumber(wildcards.sn)
	local two = tonumber(wildcards.perc)
	local msg
	local skill

	
	for i,v in pairs(levelSkillSpells) do
		if one == i then
			skill = v
		end
	end
	
	local showskillgain = "true"
	
		if tonumber(two) == 1 then
			levelskill(skill)
		elseif tonumber(two) == 100 and showskillgain=="true" then
			msg = "@x125I have @x023M@x041astered "..skill
		elseif tonumber(two) < 100 and showskillgain=="true" then
			msg = skill.." @x125 Has @x127I@x135ncreased@x125 to @x088"..two.."@w"
		end
		
		if two > 1 then
			SendNoEcho(LevelReportVariables.channel.." "..msg)
		end
end

function begin_sList()
		EnableTriggerGroup("SListCapture", true)
		EnableTrigger("RecoveriesStart", true)
		ColourNote("darkorange", "", "*** Getting Skills/Spells")
end

function stop_sList()
		EnableTriggerGroup("SListCapture", false)
		SaveState()

		ColourNote("darkorange", "", "*** Got the Skills/Spells.")
end

function SendSlistCommand()
	if (slistCommandSent == false) then
		slistCommandSent = true
		begin_sList()
		SendNoEcho("slist noprompt")
	end
end
	
function buildSlist()
	if (sList.initilized == 0) then
		if (currentState == 3) then
			SendPkt (string.char (IAC, SB, TELOPT, SKILLGAINS, 1, IAC, SE))

			SendSlistCommand()
			sList.initilized = 1
		end
	end
end

function SlistUpdate(name, line, wildcards)
	local sn = tonumber(wildcards[1])
	local nm = wildcards[2]
	local tg = tonumber(wildcards[3])
	local du = tonumber(wildcards[4])
	local pc = tonumber(wildcards[5])
	local rc = tonumber(wildcards[6])
	local ty = tonumber(wildcards[7])
	
		levelSkillSpells[sn] = nm
		
end--end update

function buildFirstSpellList()
	levelSkillSpells = {}
	
	EnableTrigger("SListCapture",true)
	SendNoEcho("slist noprompt")
end

----------------------------------------------------------------------------------------------------
--									     End slist stuff 	   							          --
--																								  --
--									    Begin help Stuff										  --
----------------------------------------------------------------------------------------------------


function HadarHelp()
	ColourNote("#159FE5","","+---------------------------------","Green","","[","Cyan","","L","evel","","","Cyan","","R","Teal","","eport","Green","","]","#159FE5","","---------------------------------+")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," Setkill <update>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," If blank will update the spell used on 'kill'"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," "),"#159FE5",""," ","#F1D566","",string.format("%-64s"," Updated used to update all skills/spells"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," kill <name>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," Will use the kill spell/skill (with optional name)"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," if any issues arise, please contact Hadar via a personal note!"),"#159FE5","","|")
	ColourNote("#159FE5","","+"..string.rep("-",84).."+")
end



]]>
</script> 

</muclient>
