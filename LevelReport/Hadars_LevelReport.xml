<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, August 14, 2018, 10:19 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "LevelReport" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LevelReport"
   author="Hadar"
   id="1a36da4e764254b16bd1e33f"
   language="Lua"
   purpose="To report time between levels/pup"
   save_state="y"
   date_written="2018-08-14 10:18:40"
   requires="4.00"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^\{skillgain\}(\d+),(\d+)"
   omit_from_output="y"
   regexp="y"
   script="SkillGain"
   sequence="100"
  >
  </trigger>
  	<trigger
		name="SListStart"
		group="SpellupCapture"
		script="slist_start"
		enabled="n"
		match="\{spellheaders( learned)?\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>

	<trigger
		name="SListEnd"
		group="SpellupCapture"
		script="slist_end"
		enabled="n"
		match="^{\/spellheaders\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>
	<!--
     SN, Name, target, duration, Pct, recovery, type

     SN         : Spell number as seen in 'showskill'
     Name       : Name of the skill or spell.
     Target     : 0 - Special. Target decided in spell (gate etc)
                  1 - Attack.
                  2 - Spellup.
                  3 - Self only.
                  4 - Object
     Duration   : If you are affected by the spell, duration in seconds.
                  0 if not affected.
     Pct        : Percent practiced.
     Recovery   : If the skill/spell relies on a recovery to be useable,
                  the recovery number is here.
     Type       : 1 = Spell, 2 = Skill
	-->
	<trigger
		name="SListCapture"
		group="SpellupCapture"
		enabled="n"
		match="^(?<sn>[0-9]+),(?<name>[^,]+),(?<target>[0-9]),(?<duration>[0-9]+),(?<percent>[0-9]+),(?<recovery>\-?[0-9]+),(?<type>[0-9]+)$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="slist_capture"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^Congratulations, hero. You have increased your powers!"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_level"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^Lucky! You gain an extra (\d+) training {sessions|session}!$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_train_bonus"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^You gain (\d+) extra trains daily blessing bonus.$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_train_bonus"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^You gain (\d+) train(?s)."
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="Pup_train_add"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain a bonus (.*) point!$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="level_Stat_Add"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain (\d+) hit points, (\d+) mana, (\d+) moves, (\d+) practices and (\d+) trains\."
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="gain_Level"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain (\d+) extra train.? daily blessing bonus"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="level_bonus_train"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^Lucky! You gain an extra (\d+) training session(?s)!$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="level_bonus_train"
	>
	</trigger>
	
	
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   script="level_Report_Build"
   match="^levelreport ?(.*)?$"
   enabled="y"
   regexp="y"
   group="levelreports"
   sequence="100"
  >
  </alias>
  <alias
   match="^pupreport ?(.*)?$"
   enabled="y"
   regexp="y"
   group="pupreports"
   sequence="100"
   script="Pup_report_build"
  >
  </alias>
    <alias match="^(?:had|level) help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
</aliases>

<script>
<![CDATA[
dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "HadarLuaCommon"
require "serialize"
require "HadarLevelReport"

	local LevelReportVariables = {}
	local leveltable = {}
	local sList = -1
	local currentState = -1 -- uninitialized
	local slistCommandSent = false
	local IAC = 255
	local SB  = 250
	local TELOPT = 102
	local SE  = 240
	local SKILLGAINS = 8
	local GLOBAL_TAG_MUTE = 50

function gmcp(what) --pulled from gmcp helper, lets see if fixes older version
	result, value = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", what)
	if result ~= 0 then
		ColourNote ("orange", "", "Warning: Could not get GMCP value for " .. what)
		return nil
	else
		local luastmt = "ret = " .. value
		assert (loadstring (luastmt or "")) ()
		return ret
	end -- if
end -- gmcp

function levelTimeDiff(t2,t1,script)
	local d1,d2,carry,diff = os.date('*t',t1),os.date('*t',t2),false,{}
	local colMax = {60,60,24,os.date('*t',os.time{year=d1.year,month=d1.month+1,day=0}).day,12}
	d2.hour = d2.hour - (d2.isdst and 1 or 0) + (d1.isdst and 1 or 0) -- handle dst
	for i,v in ipairs({'sec','min','hour','day','month','year'}) do
		diff[v] = d2[v] - d1[v] + (carry and -1 or 0)
		carry = diff[v] < 0
		if carry then diff[v] = diff[v] + colMax[i] end
	end
	for i,v in pairs(diff) do
		script[i] = v
	end
	return diff
end

function OnPluginBroadcast(msg, id, name, text)

		if (currentState == -1) then
			currentState = 0 -- sent request
			Send_GMCP_Packet("request char")
		end

  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "char.status") then
		res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
		
		
			print(gmcpval)

				luastmt = "gmcpdata = " .. gmcparg
				assert (loadstring (luastmt or "")) ()
				currentState = tonumber(gmcpval("status.state"))
				print("char.status.state : " ..currentState)

				BuildSkillz()
		
		
		for i,v in pairs(luastmt) do
		
			if i == "level" then LevelReportVariables.level=v end
			if i == "level" then 
				if v >= "200" then
					EnableTrigger("PupTriggers", true)
					EnableTrigger("LevelTriggers", false)
				else
					EnableTrigger("PupTriggers", false)
					EnableTrigger("LevelTriggers", true)
				end
			end
			
		end -- end for
		
	end --end if char status
	
  end
end

											 
----------------------------------------------------------------------------------------------------
--										      End GMCP											  --
--																								  --
--								         Start Standard Stuff									  --
----------------------------------------------------------------------------------------------------

function OnPluginSaveState ()
	SetVariable ("LevelReportVariables", serialize.save ("LevelReportVariables"))
	SetVariable ("leveltable", serialize.save ("leveltable"))
end -- function OnPluginSaveState

function OnPluginInstall ()
	
	if (currentState == -1) then
		currentState = 0 -- sent request
	end
	
	
	LevelReportVariables.initilized = 0
	assert (loadstring (GetVariable ("LevelReportVariables") or "")) ()
	assert (loadstring (GetVariable ("leveltable") or "")) ()
	
	if LevelReportVariables.initilized == 0 then
		buildInitialColors()
	end
	
	print("had help (to see all of hadar's plugin helpfiles), or level help to just see this one")
end

----------------------------------------------------------------------------------------------------
--										  End Standard Stuff									  --
--																								  --
--									    Begin Custom Function									  --
----------------------------------------------------------------------------------------------------

function SkillGain(name, line, wildcards)
	local one = wildcards[1]
	local two = wildcards[2]
	local skill = sList[tonumber(one)].name
	local showskillgain
	local skill = "some sort of probe"
	
		if two == 1 then
			levelskill(skill)
		elseif two == 100 and showskillgain==1 then
			msg = "@x125I have @x023M@x041astered "..skill
		elseif two > 85 and showskillgain==1 then
			msg = skill.." @x125 Has @x127I@x135ncreased@x125 to @x088"..two.."@w"
		end
	send(channel..msg)
end

function Pup_level()
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	levelinfo.bonustrain = 0
	levelinfo.bonustraintwo = 0
	DoAfterSpecial(0.5, 'Execute("pupreport echo")', sendto.script)
end

function Pup_train_bonus(name, line, wildcards)
	puptrainbonus(wildcards[1])
end

function Pup_train_add(name, line, wildcards)
	puptrainadd(wildcards[1])
end

function buildInitialColors()
LevelReportVariables.pupColorFirst = "@G"
LevelReportVariables.pupColorSecond = "@g"
LevelReportVariables.pupBrac = "@R"
LevelReportVariables.pupColorNum = "@w"
LevelReportVariables.pupColorTime = "@W"
LevelReportVariables.pupColorBracSecond = "@w" 
LevelReportVariables.pupColorPlus = "@W"
LevelReportVariables.pupColorStat = "@w"

LevelReportVariables.levelColorFirst = "@G"
LevelReportVariables.levelColorSecond = "@g"
LevelReportVariables.levelBrac = "@R"
LevelReportVariables.levelColorNum = "@w"
LevelReportVariables.levelColorTime = "@W"
LevelReportVariables.levelColorBracSecond = "@w" 
LevelReportVariables.levelColorPlus = "@W"
LevelReportVariables.levelColorStat = "@w"
LevelReportVariables.initilized = 1
end

function Pup_report_build(name, line, wildcards)
local channel
	if wildcards[1] == nil then
		channel = LevelReportVariables[channel]
	else
		channel = wildcards[1]
	end
	
	
	pupreport(channel,LevelReportVariables[pupColorFirst],LevelReportVariables[pupColorSecond],LevelReportVariables[pupBrac],LevelReportVariables[pupColorNum],LevelReportVariables[pupColorTime],LevelReportVariables[pupColorBracSecond],LevelReportVariables[pupColorPlus],LevelReportVariables[pupColorStat])
end

function level_Report_Build(name, line, wildcards)
local channel
	if wildcards[1] == nil then
		channel = LevelReportVariables[channel]
	else
		channel = wildcards[1]
	end
	
	local report = "L"..LevelReportVariables[level]
	levelreport(LevelReportVariables[level],channel,LevelReportVariables[levelColorFirst],LevelReportVariables[levelColorSecond],LevelReportVariables[levelBrac],LevelReportVariables[levelColorNum],LevelReportVariables[levelColorTime],LevelReportVariables[levelColorBracSecond],LevelReportVariables[levelColorPlus],LevelReportVariables[levelColorStat])
	leveltable[report] = LevelReportVariables.message
--	zs.cmd.send(LevelReportVariables.channel.." "..LevelReportVariables.message)
--	zs.var.leveltable              = leveltable</value>
end

function level_Stat_Add(name, line, wildcards)
	local stat = wildcards[1]
	if stat == "Strength" then
		stat = "Str"
	elseif stat == "Intelligence" then
		stat = "Int"
	elseif stat == "Wisdom" then
		stat = "Wis"
	elseif stat == "Dexterity" then
		stat = "Dex"
	elseif stat == "Constitution" then
		stat = "Con"
	elseif stat == "Luck" then
		stat = "Lck"
	end
	bonusstatadd(stat)
end

function gain_Level(name, line, wildcards)
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	statadd(wildcards[1],wildcards[2],wildcards[3],wildcards[4],wildcards[5])
	DoAfterSpecial(0.5, 'Execute("levelreport")', sendto.script)
end

function level_bonus_train(name, line, wildcards)
	trainadd(wildcards[1])
end















function slist_start(name, line, wildcards)
	sList = {}
	EnableTrigger("SListCapture", true)
	EnableTrigger("SListEnd", true)
	ColourNote("darkorange", "", "*** Indexing skills/spells...")
end

function slist_capture(name, line, wildcards)

	local textType
	local sn = tonumber(wildcards.sn)
	local addItem = false
	if (tonumber(wildcards.type) == 2) then
		textType = "skill"
	else
		textType = "spell"
	end

	local value = { name = wildcards.name, target = tonumber(wildcards.target), recovery = tonumber(wildcards.recovery), percent = tonumber(wildcards.percent), type = textType }

	-- validate
	-- bug: need to make inertial barrier work!
	if (value.target == 0) then
		if (sn == inertial_barrier_sn or sn == tonumber(USER_v2_clan_sn)) then
			addItem = true
		else
			DebugNote(" *** not indexed - category-validation " .. line)
		end
	elseif (value.target == 2 or value.target == 3) then
		addItem = true
	else
		DebugNote(" *** not indexed - target-validation " .. line)
	end

	if (value.recovery ~= -1) then
		addItem = false
		DebugNote(" *** not indexed - recovery-validation " .. line)
	end

	if (addItem) then
		-- add to list
		sList[tonumber(sn)] = value
		DebugNote(sList[tonumber(sn)].name .. " added")
	end
end

function slist_end(name, line, wildcards)
	EnableTriggerGroup("SpellupCapture", false)
	ColourNote("darkorange", "", "*** Skills/spells indexed.")
end

	function BuildSkillz() --took from winkle because why remake the wheel
		if (sList == -1) then
			if (currentState == 3) then
				DebugNote("BuildSkillz...")
								--ensure tags are enabled
				DebugNote("Setting spell/skill tags.")
				--SendPkt (string.char (IAC, SB, TELOPT, GLOBAL_TAG_MUTE, 2, IAC, SE))
				SendPkt (string.char (IAC, SB, TELOPT, SKILLGAINS, 1, IAC, SE))
				Send_GMCP_Packet("request char")
				
				Send("echo we made it to buildskillz")

				SendSlistCommand()
			end
		end
	end
	
function SendSlistCommand()
	if (slistCommandSent == false) then
		slistCommandSent = true
		EnableTrigger("SListStart", true)
		SendNoEcho("slist")
	end
end



function HadarHelp()
	ColourNote("#159FE5","","+---------------------------------","Green","","[","Cyan","","L","evel","","","Cyan","","R","Teal","","eport","Green","","]","#159FE5","","---------------------------------+")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," Setkill <update>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," If blank will update the spell used on 'kill'"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," "),"#159FE5",""," ","#F1D566","",string.format("%-64s"," Updated used to update all skills/spells"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," kill <name>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," Will use the kill spell/skill (with optional name)"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," if any issues arise, please contact Hadar via a personal note!"),"#159FE5","","|")
	ColourNote("#159FE5","","+"..string.rep("-",84).."+")
end


]]>
</script> 

</muclient>
