<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, August 14, 2018, 10:19 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "LevelReport" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LevelReport"
   author="Hadar"
   id="1a36da4e764254b16bd1e33f"
   language="Lua"
   purpose="To report time between levels/pup"
   save_state="y"
   date_written="2018-08-14 10:18:40"
   requires="4.00"
   version="2.00"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^\{skillgain\}(?<sn>[0-9]{1,3})\,(?<perc>[0-9]{1,3})$"
   omit_from_output="y"
   regexp="y"
   script="SkillGain"
   sequence="100"
  >
  </trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^Congratulations, hero. You have increased your powers!"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="Pup_level"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^Lucky! You gain an extra (\d+) training sessions?!$"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="Pup_train_bonus"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^You gain (\d+) extra trains daily blessing bonus.$"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="Pup_train_bonus"
	>
	</trigger>
	<trigger
		group="PupTriggers"
		enabled="n"
		match="^You gain (\d+) train(?s)."
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="Pup_train_add"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain a bonus (.*) point!$"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="level_Stat_Add"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain ([0-9]{1,3}) hit points, ([0-9]{1,3}) mana, ([0-9]{1,3}) moves, ([0-9]{1,3}) practices and ([0-9]{1,3}) trains\."
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="gain_Level"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain ([0-9]{1,3}) hit points, ([0-9]{1,3}) mana, ([0-9]{1,3}) moves, ([0-9]{1,3}) practices, ([0-9]{1,3}) trains and ([0-9]{1,3}) instinct trains\.$"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="gain_Level_redo"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^You gain (\d+) extra train.? daily blessing bonus"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="level_bonus_train"
	>
	</trigger>
	<trigger
		group="LevelTriggers"
		enabled="n"
		match="^Lucky! You gain an extra (\d+) training session(?s)!$"
		regexp="y"
		omit_from_output="n"
		sequence="100"
		script="level_bonus_train"
	>
	</trigger>
	
	
		<!-- Recovery Capture -->
	<trigger
		name="RecoveriesStart"
		enabled="n"
		match="^\{recoveries\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		send_to="12"
	>
	<send>
		EnableTrigger("RecoveriesStart", false)
		EnableTrigger("RecoveriesCapture", true)
		EnableTrigger("RecoveriesEnd", true)
	</send>
	</trigger>

	<trigger
		name="RecoveriesCapture"
		enabled="n"
		match="^[0-9]+,[^,]+,[0-9]+$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>

	<trigger
		name="RecoveriesEnd"
		enabled="n"
		match="^\{\/recoveries\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		send_to="12"
	>
	<send>
		EnableTrigger("RecoveriesStart", false)
		EnableTrigger("RecoveriesCapture", false)
		EnableTrigger("RecoveriesEnd", false)
	</send>
	</trigger>
	
		<!-- slist Capture -->
	<trigger
		name="SListStart"
		group="SpellupCapture"
		script="begin_sList"
		enabled="n"
		match="\{spellheaders( learned)?\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>

	<trigger
		name="SListEnd"
		group="SpellupCapture"
		script="stop_sList"
		enabled="n"
		match="^{\/spellheaders\}$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
	>
	</trigger>
	<trigger
		name="SListCapture"
		group="SpellupCapture"
		enabled="n"
		match="^(\d+),(.*),(\d+),(\d+),(\d+),([+-]?[0-9,]+),(\d+)$"
		regexp="y"
		omit_from_output="y"
		sequence="100"
		script="SlistUpdate"
	>
	</trigger>
	
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   script="level_Report_Build"
   match="^levelreport ?(.*)?$"
   enabled="y"
   regexp="y"
   group="levelreports"
   sequence="100"
  >
  </alias>
  <alias
   script="set_SkillGain_Reports"
   match="^skillgain ?(.*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   script="set_StatGain_Reports"
   match="^statgain ?(.*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
    <alias
   script="set_TimeOnly_Reports"
   match="^leveltimeonly ?(.*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   match="^pupreport ?(.*)?$"
   enabled="y"
   regexp="y"
   group="pupreports"
   sequence="100"
   script="Pup_report_build"
  >
  </alias>
  <alias
   match="^levelshow (?:(\d+|all))?(?:\s(.*))?$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="Level_show"
  >
  </alias>
  <alias
   match="^levelchannel (.*)$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="set_Level_Report"
  >
  </alias>
    <alias match="^(?:had|level) help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
</aliases>

<script>
<![CDATA[
require "serialize"

	LevelReportVariables = {}
	local currentState = -1 -- uninitialized
	local slistCommandSent = false
	local IAC = 255
	local SB  = 250
	local TELOPT = 102
	local SE  = 240
	local SKILLGAINS = 8
	local GLOBAL_TAG_MUTE = 50
	
	levelSkillSpells = {}
	levelinfo = {}
	mylevelreport = {}
	leveltable = {}

function gmcp(what) --pulled from gmcp helper, lets see if fixes older version
	result, value = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", what)
	if result ~= 0 then
		ColourNote ("orange", "", "Warning: Could not get GMCP value for " .. what)
		return nil
	else
		local luastmt = "ret = " .. value
		assert (loadstring (luastmt or "")) ()
		return ret
	end -- if
end -- gmcp

function levelTimeDiff(t2,t1,script)
	local d1,d2,carry,diff = os.date('*t',t1),os.date('*t',t2),false,{}
	local colMax = {60,60,24,os.date('*t',os.time{year=d1.year,month=d1.month+1,day=0}).day,12}
	d2.hour = d2.hour - (d2.isdst and 1 or 0) + (d1.isdst and 1 or 0) -- handle dst
	for i,v in ipairs({'sec','min','hour','day','month','year'}) do
		diff[v] = d2[v] - d1[v] + (carry and -1 or 0)
		carry = diff[v] < 0
		if carry then diff[v] = diff[v] + colMax[i] end
	end
	for i,v in pairs(diff) do
		script[i] = v
	end
	return diff
end

function OnPluginBroadcast(msg, id, name, text)

  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "char.status") then
		res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
		
				assert(loadstring("LoadInfo = "..gmcparg or "")) ()
				currentState = tonumber(gmcp("char.status.state"))
		
		for i,v in pairs(LoadInfo) do
		
			if i == "level" then
				LevelReportVariables.level=v  
				if tonumber(v) >= 200 then
					EnableTriggerGroup("PupTriggers", true)
					EnableTriggerGroup("LevelTriggers", false)
				else
					EnableTriggerGroup("PupTriggers", false)
					EnableTriggerGroup("LevelTriggers", true)
				end
			end
			
		end -- end for
		
	end --end if char status
	
  end
end

											 
----------------------------------------------------------------------------------------------------
--										      End GMCP											  --
--																								  --
--								         Start Standard Stuff									  --
----------------------------------------------------------------------------------------------------

function OnPluginSaveState ()
	SetVariable ("LevelReportVariables", "LevelReportVariables = " .. serialize.save_simple (LevelReportVariables))
	SetVariable ("levelSkillSpells", serialize.save ("levelSkillSpells"))
	SetVariable ("leveltable", "leveltable = " .. serialize.save_simple (leveltable))
	SetVariable ("levelinfo", "levelinfo = " .. serialize.save_simple (levelinfo))
	SetVariable ("pastfirstinstall", "true")
end -- function OnPluginSaveState


function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
	
	if (currentState == -1) then
		currentState = 0 -- sent request
	end
	
	print("had help (to see all of hadar's plugin helpfiles), or level help to just see this one")
  
	OnPluginEnable ()
end

function OnPluginEnable ()

	SendNoEcho("protocol gmcp sendchar")
	SendNoEcho("protocol gmcp sendstatus")
	
	LevelReportVariables = {}
	levelSkillSpells = {}
	leveltable = {}
	levelinfo = {}
	
	
	if GetVariable ("pastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("LevelReportVariables") or "")) ()
		assert (loadstring (GetVariable ("levelSkillSpells") or "")) ()
		assert (loadstring (GetVariable ("leveltable") or "")) ()
		assert (loadstring (GetVariable ("levelinfo") or "")) ()
	else
		buildInitialColors()
		buildFirstSpellList()
	end

end

function buildInitialColors()
	LevelReportVariables.pupColorFirst = "@G"
	LevelReportVariables.pupColorSecond = "@g"
	LevelReportVariables.pupBrac = "@R"
	LevelReportVariables.pupColorNum = "@w"
	LevelReportVariables.pupColorTime = "@W"
	LevelReportVariables.pupColorBracSecond = "@w" 
	LevelReportVariables.pupColorPlus = "@W"
	LevelReportVariables.pupColorStat = "@w"

	LevelReportVariables.levelColorFirst = "@G"
	LevelReportVariables.levelColorSecond = "@g"
	LevelReportVariables.levelBrac = "@R"
	LevelReportVariables.levelColorNum = "@w"
	LevelReportVariables.levelColorTime = "@W"
	LevelReportVariables.levelColorBracSecond = "@w" 
	LevelReportVariables.levelColorPlus = "@W"
	LevelReportVariables.levelColorStat = "@w"
	LevelReportVariables.initilized = 1
	LevelReportVariables.channel = "gt"
	LevelReportVariables.showstatgain = "true"
	LevelReportVariables.showskillgain = "true"
	LevelReportVariables.timeonly = "false"
	mylevelepoch()
	mylevelconvert()
end

function set_Level_Report(name, line, wildcards)
	if wildcards[1] ~= nil then
		LevelReportVariables.channel = wildcards[1]
		ColourNote("Teal","","Level Report channel set to "..LevelReportVariables.channel)
	end
end

function set_SkillGain_Reports(name,line,wildcards)
	if wildcards[1] == "on" then
		LevelReportVariables.showskillgain = "true"
		LevelReportVariables.timeonly = "false"
		ColourNote("Green","","Showing SkillGain is now active")
	elseif wildcards[1] == "off" then
		LevelReportVariables.showskillgain = "false"
		ColourNote("Red","","Showing SkillGain is now De-active")
	else
		ColourNote("Cyan","","proper syntax is skillgain on or skillgain off")
	end
end

function set_StatGain_Reports(name,line,wildcards)
	if wildcards[1] == "on" then
		LevelReportVariables.showstatgain = "true"
		LevelReportVariables.timeonly = "false"
		ColourNote("Green","","Showing Stat Gain is now active")
	elseif wildcards[1] == "off" then
		LevelReportVariables.showstatgain = "false"
		ColourNote("Red","","Showing Stat Gain is now De-active")
	else
		ColourNote("Cyan","","proper syntax is statgain on or statgain off")
	end
end

function set_TimeOnly_Reports(name,line,wildcards)
	if wildcards[1] == "on" then
		LevelReportVariables.timeonly = "true"
		ColourNote("Green","","only showing time taken to level")
	elseif wildcards[1] == "off" then
		LevelReportVariables.timeonly = "false"
		ColourNote("Red","","showing all info when leveling")
	else
		ColourNote("Cyan","","proper syntax is leveltimeonly on or leveltimeonly off")
	end
end

----------------------------------------------------------------------------------------------------
--										  End Standard Stuff									  --
--																								  --
--									    Begin Level/PUP Functions								  --
----------------------------------------------------------------------------------------------------

function Pup_report_build(name, line, wildcards)
local channel
	if wildcards[1] == nil then
		channel = LevelReportVariables.channel
	else
		channel = wildcards[1]
	end
	
	
	local test = pupreport(channel,LevelReportVariables.pupColorFirst,LevelReportVariables.pupColorSecond,LevelReportVariables.pupBrac,LevelReportVariables.pupColorNum,LevelReportVariables.pupColorTime,LevelReportVariables.pupColorBracSecond,LevelReportVariables.pupColorPlus,LevelReportVariables.pupColorStat)
	
	SendNoEcho(channel.." "..test)
end

function Pup_level()
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	levelinfo.bonustrain = 0
	levelinfo.bonustraintwo = 0
	DoAfterSpecial(0.5, 'Execute("pupreport "..LevelReportVariables.channel)', sendto.script)
end

function Pup_train_bonus(name, line, wildcards)
	puptrainbonus(wildcards[1])
end

function Pup_train_add(name, line, wildcards)
	puptrainadd(wildcards[1])
end

function level_Report_Build(name, line, wildcards)
local channel

	if wildcards[1] == nil then
		channel = LevelReportVariables.channel
	else
		channel = wildcards[1]
	end
	
	
	local report = tonumber(LevelReportVariables.level)
	
	local test = levelreport(LevelReportVariables.level,channel,LevelReportVariables.levelColorFirst,LevelReportVariables.levelColorSecond,LevelReportVariables.levelBrac,LevelReportVariables.levelColorNum,LevelReportVariables.levelColorTime,LevelReportVariables.levelColorBracSecond,LevelReportVariables.levelColorPlus,LevelReportVariables.levelColorStat)
	leveltable[report] = mylevelreport.message
	
	
	SendNoEcho(channel.." "..leveltable[report])
end

function level_Stat_Add(name, line, wildcards)
	local stat = wildcards[1]
	if stat == "Strength" then
		stat = "Str"
	elseif stat == "Intelligence" then
		stat = "Int"
	elseif stat == "Wisdom" then
		stat = "Wis"
	elseif stat == "Dexterity" then
		stat = "Dex"
	elseif stat == "Constitution" then
		stat = "Con"
	elseif stat == "Luck" then
		stat = "Lck"
	end
	bonusstatadd(stat)
end

function gain_Level(name, line, wildcards)
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	LevelReportVariables.redo=0
	statadd(wildcards[1],wildcards[2],wildcards[3],wildcards[4],wildcards[5])
	
	DoAfterSpecial(0.5, 'Execute("levelreport "..LevelReportVariables.channel)', sendto.script)
end

function gain_Level_redo(name, line, wildcards)
	mylevelconvert()
	levelTimeDiff(os.time(),levelinfo.oldtimestamp,levelinfo)
	mylevelepoch()
	LevelReportVariables.redo=1
	stataddRedo(wildcards[1],wildcards[2],wildcards[3],wildcards[4],wildcards[5],wildcards[6])
	
	DoAfterSpecial(0.5, 'Execute("levelreport "..LevelReportVariables.channel)', sendto.script)
end

function level_bonus_train(name, line, wildcards)
	trainadd(wildcards[1])
end

function Level_show(name, line, wildcards)
	local level = wildcards[1]
	local report = tonumber(level)
	local channel
	if wildcards[2]=="" then
		channel = "gt"
	else
		channel = wildcards[2]
	end
	
	if level=="all" then
		if leveltable~=nil then
			for k,v in pairs(leveltable) do
				print(v)
			end
		else
			print("You have not leveled yet, go out and level!")
		end
	else
		if channel == nil then
			print("Could not find a channel to concat")
		elseif leveltable[report] == nil then
			print("Could not find any level data for that level")
		else
			SendNoEcho(channel.." "..leveltable[report])
		end
	end
end


----------------------------------------------------------------------------------------------------
--									  End Level/PUP Functions	   							      --
--																								  --
--									    Begin Slist Stuff										  --
----------------------------------------------------------------------------------------------------

function SkillGain(name, line, wildcards)
	local one = tonumber(wildcards.sn)
	local two = tonumber(wildcards.perc)
	local msg
	local skill

	
	for i,v in pairs(levelSkillSpells) do
		if one == i then
			skill = v
		end
	end
	
		if tonumber(two) == 1 or tonumber(two) == 85 and LevelReportVariables.showskillgain=="true" then
			levelskill(skill)
		elseif tonumber(two) == 100 and LevelReportVariables.showskillgain=="true" then
			msg = "@x125I have @x023M@x041astered "..skill.. "@w"
		elseif tonumber(two) < 100 and LevelReportVariables.showskillgain=="true" then
			msg = skill.." @x125 Has @x127I@x135ncreased@x125 to @x088"..two.."@w"
		end
		
		if two > 1 and two~=85 and LevelReportVariables.showskillgain=="true" then
			SendNoEcho(LevelReportVariables.channel.." "..msg)
		end
end

function begin_sList()
		EnableTriggerGroup("SListCapture", true)
		EnableTrigger("RecoveriesStart", true)
		ColourNote("darkorange", "", "*** Getting Skills/Spells")
end

function stop_sList()
		EnableTriggerGroup("SListCapture", false)
		SaveState()

		ColourNote("darkorange", "", "*** Got the Skills/Spells.")
end

function SendSlistCommand()
	if (slistCommandSent == false) then
		slistCommandSent = true
		begin_sList()
		SendNoEcho("slist noprompt")
	end
end
	
function buildSlist()
	if (sList.initilized == 0) then
		if (currentState == 3) then
			SendPkt (string.char (IAC, SB, TELOPT, SKILLGAINS, 1, IAC, SE))

			SendSlistCommand()
			sList.initilized = 1
		end
	end
end

function SlistUpdate(name, line, wildcards)
	local sn = tonumber(wildcards[1])
	local nm = wildcards[2]
	local tg = tonumber(wildcards[3])
	local du = tonumber(wildcards[4])
	local pc = tonumber(wildcards[5])
	local rc = tonumber(wildcards[6])
	local ty = tonumber(wildcards[7])
	
		levelSkillSpells[sn] = nm
		
end--end update

function buildFirstSpellList()
	levelSkillSpells = {}
	
	EnableTrigger("SListCapture",true)
	SendNoEcho("slist noprompt")
end

----------------------------------------------------------------------------------------------------
--									     End slist stuff 	   							          --
--																								  --
--									    Begin hadarlua Stuff									  --
----------------------------------------------------------------------------------------------------

function mylevelconvert()
--
		levelinfo.oldtimestamp	 = levelinfo.newtimestamp
--
end

function mylevelepoch()
--
		levelinfo.newtimestamp = os.time()
--
end

function statadd(hp,mana,moves,prac,train)
--
		levelinfo.hp		 = hp
		levelinfo.mana		 = mana
		levelinfo.moves		 = moves
		levelinfo.prac		 = prac
		levelinfo.train 	 = train
		levelinfo.bonusstat	 = nil
		levelinfo.bonustrain = 0
		levelinfo.levelskill = nil
--
end

function stataddRedo(hp,mana,moves,prac,train,instinct)
--
		levelinfo.hp		 = hp
		levelinfo.mana		 = mana
		levelinfo.moves		 = moves
		levelinfo.prac		 = prac
		levelinfo.train 	 = train
		levelinfo.instinct   = instinct
		levelinfo.bonusstat	 = nil
		levelinfo.bonustrain = 0
		levelinfo.levelskill = nil
--
end

function trainadd(mybonustrain)
--
		levelinfo.bonustrain = levelinfo.bonustrain+mybonustrain
--
end

function puptrainadd(mybonustrain)
--
		levelinfo.bonustrain = mybonustrain
--
end

function puptrainbonus(mybonustrain)
--
		levelinfo.bonustraintwo = levelinfo.bonustraintwo + mybonustrain
--
end

function bonusstatadd(stat)
--
	if LevelReportVariables.showstatgain=="true" then
		if levelinfo.bonusstat ~= nil then
			levelinfo.bonusstat = levelinfo.bonusstat..","..stat
		else
			levelinfo.bonusstat = stat
		end
	end
--
end

function levelskill(skill)
--
	if levelinfo["levelskill"]==nil then
		levelinfo.levelskill=skill
	else
		levelinfo.levelskill=levelinfo["levelskill"]..","..skill
	end
--
end

function pupreport(channel,color1,color2,brac,colornum,colortim,brac2,colorplus,colorstat)
--
	local endcolor	= "@w"

	if channel == nil then
		mylevelreport.channel = "gt"
	else
		mylevelreport.channel = channel
	end
	
	if tonumber(levelinfo.year) > 0 then -- this if deals with spent over 1 year leveling colors the number red
		mylevelreport.time = color1.."Y:@R"..levelinfo.year..","
	else
		mylevelreport.time = ""
	end

	if tonumber(levelinfo.month) > 0 then -- this if deals with spent over 1 month leveling colors the number red
		mylevelreport.time = mylevelreport.time .. color1 .."M:@R"..levelinfo.month.." "
	else
		mylevelreport.time = ""
	end

	if tonumber(levelinfo.day) > 0 then -- this if deals with spent over 1 day leveling colors the number red
		mylevelreport.time = mylevelreport.time .. color1 .. "D:@R" .. levelinfo.day .. " "
	else
		mylevelreport.time = ""
	end

		mylevelreport.time = mylevelreport.time .. color1 .. "H:".. colortim .. levelinfo.hour .. " "
		mylevelreport.time = mylevelreport.time .. color1 .. "M:".. colortim .. levelinfo.min .. " "
		mylevelreport.time = mylevelreport.time .. color1 .. "S:".. colortim .. levelinfo.sec

		if LevelReportVariables.timeonly == "false" then
			if tonumber(levelinfo.bonustraintwo)>=1 then
				local mylevelmath = levelinfo.bonustrain+levelinfo.bonustraintwo
				mylevelreport.gains=color1.."T"..color2.."rains:"..colorstat..levelinfo.bonustrain..colorplus.."+"..colorstat..levelinfo.bonustraintwo..colorplus.."="..mylevelmath..endcolor
			else
				mylevelreport.gains=color1.."T"..color2.."rains:"..levelinfo.bonustrain
			end
		
		
			mylevelreport.message = color1 .. "P" .. color2 .. "up:" .. color1 .. "T" .. color2 .. "ook:" .. brac2 .. "[" .. mylevelreport.time .. brac2 .. "] " .. mylevelreport.gains .. endcolor
		else
			mylevelreport.message = color1 .. "P" .. color2 .. "up:" .. color1 .. "T" .. color2 .. "ook:" .. brac2 .. "[" .. mylevelreport.time .. brac2 .. "]"
		end
		
		return mylevelreport.message
--
end
function levelreport(level,channel,color1,color2,brac,colornum,colortim,brac2,colorplus,colorstat)
--
	local endcolor	= "@w"

	if channel == nil then
	mylevelreport.channel = "gt"
	else
	mylevelreport.channel = channel
	end

	if tonumber(levelinfo.year) > 0 then -- this if deals with spent over 1 year leveling colors the number red
		mylevelreport.time = color1.."Y:@R"..levelinfo.year..","
	else
		mylevelreport.time = ""
	end

	if tonumber(levelinfo.month) > 0 then -- this if deals with spent over 1 month leveling colors the number red
		mylevelreport.time = mylevelreport.time .. color1 .."M:@R"..levelinfo.month.." "
	else
		mylevelreport.time = ""
	end

	if tonumber(levelinfo.day) > 0 then -- this if deals with spent over 1 day leveling colors the number red
		mylevelreport.time = mylevelreport.time .. color1 .. "D:@R" .. levelinfo.day .. " "
	else
		mylevelreport.time = ""
	end

		mylevelreport.time = mylevelreport.time .. color1 .. "H:".. colortim .. levelinfo.hour .. " "
		mylevelreport.time = mylevelreport.time .. color1 .. "M:".. colortim .. levelinfo.min .. " "
		mylevelreport.time = mylevelreport.time .. color1 .. "S:".. colortim .. levelinfo.sec
		
if LevelReportVariables.timeonly == "false" then

		mylevelreport.gains = color1 .. "H" .. color2 .. "P" .. brac .. "(" .. colornum .. levelinfo.hp .. brac .. ")"
		mylevelreport.gains = mylevelreport.gains .. color1 .."M" .. color2 .. "n" .. brac .. "(" ..colornum ..levelinfo.mana .. brac .. ")"
		mylevelreport.gains = mylevelreport.gains .. color1 .."M" .. color2 .. "v" .. brac .. "(" ..colornum ..levelinfo.moves .. brac .. ")"

	if tonumber(levelinfo.prac) > 0 then
		mylevelreport.gains = mylevelreport.gains .. color1 .. "P" .. color2 .. "r" .. brac .. "(" .. colornum .. levelinfo.prac .. brac .. ")"
	end

	if tonumber(levelinfo.train) > 0 then
	
		if tonumber(levelinfo.bonustrain) > 0 then
			mylevelreport.gains = mylevelreport.gains .. color1 .. "T" .. color2 .. "r" .. brac .. "(" .. colornum .. levelinfo.train .. colorplus .. "+" .. colornum .. levelinfo.bonustrain .. brac ..")"
		else
			mylevelreport.gains = mylevelreport.gains .. color1 .. "T" .. color2 .. "r" .. brac .. "(" .. colornum .. levelinfo.train .. brac .. ")"
		end
		
		if LevelReportVariables.redo == 1 then
			mylevelreport.gains = mylevelreport.gains .. color1 .. "I" .. color2 .."t" .. brac .. "(" .. colornum .. levelinfo.instinct .. brac .. ")"
		end

	end

	if levelinfo.bonusstat ~= nil then
		mylevelreport.message = color1 .. "L" .. color2 .. "evel" .. brac .. "(" .. colornum .. level .. brac .. ") " .. color1 .. "T" .. color2 .. "ook:" .. brac2 .. "[" .. mylevelreport.time .. brac2 .. "] " .. mylevelreport.gains .. color1 .. " +" .. color2 .. "Stats:" .. colorstat .. levelinfo.bonusstat .. endcolor
	else
		mylevelreport.message = color1 .. "L" .. color2 .. "evel" .. brac .. "(" .. colornum .. level .. brac .. ") " .. color1 .. "T" .. color2 .. "ook:" .. brac2 .. "[" .. mylevelreport.time .. brac2 .. "] " .. mylevelreport.gains .. endcolor
	end
	
	if levelinfo.levelskill ~= nil then 
	   mylevelreport.message=mylevelreport.message .. color1 .. "+" .. color2 .. "Skills/Spells:" .. colorstat .. levelinfo.levelskill .. endcolor
	end
	
	else
	mylevelreport.message = color1 .. "L" .. color2 .. "evel" .. brac .. "(" .. colornum .. level .. brac .. ") " .. color1 .. "T" .. color2 .. "ook:" .. brac2 .. "[" .. mylevelreport.time .. brac2 .. "] "
	
	mylevelreport.message = "@GL@gevel@R(@%s@R) @GT@gook:@w[@GH:@W%s @GM:@W%s @GS:@W%s@w] @GH@gP@R(@w%s@R)@GM@gn@R(@w%s@R)@GM@gv@R(@w%s@R)@GP@gr@R(@w%s@R)@GT@gr@R(@w%s@R)"
	
end
	
return mylevelreport.channel .. " " .. mylevelreport.message
--
end


----------------------------------------------------------------------------------------------------
--									     End hadarlua stuff 	   							      --
--																								  --
--									    Begin help Stuff										  --
----------------------------------------------------------------------------------------------------

function HadarHelp()
	ColourNote("#159FE5","","+-----------------------------------","Green","","[","Cyan","","L","Teal","","evel","Cyan",""," R","Teal","","eport","Green","","]","#159FE5","","-----------------------------------+")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," levelchannel <channel>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," set the channel to report to."),"#159FE5","","|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," "),"#159FE5",""," ","#F1D566","",string.format("%-64s"," Updated used to update all skills/spells"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," levelshow <level> <channel>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," show the given levels report"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
		ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," statgain <on or off>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," shows stats on level"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
		ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," skillgain <on or off>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," shows skills gained on level"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," leveltimeonly <on or off>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," shows only level time"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," if any issues arise, please contact Hadar via a personal note!"),"#159FE5","","|")
	ColourNote("#159FE5","","+"..string.rep("-",84).."+")
end


--leveltimeonly
]]>
</script> 

</muclient>
