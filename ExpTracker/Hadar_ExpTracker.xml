<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!--
     Testers: Shotgun
              Mousie
              Tallimos
              
              
TODO:

-->
<muclient>
<plugin
   name="Hadar_Exp_Tacker"
   author="Hadar"
   id="197cdb5126215b1ae7e178ea"
   language="Lua"
   purpose="all the exp"
   save_state="y"
   date_written="2020-01-01 00:00:00"
   requires="4.00"
   version="1.84"
   >

</plugin>

<triggers>
<trigger
   enabled="y"
   match="^You receive (.*) experience points?\."
   omit_from_output="n"
   regexp="y"
   group=""
   script="expGained"
   sequence="100"
  >
</trigger>
<trigger
   enabled="y"
   match="^You receive \(halved\) (.*) experience points?\."
   omit_from_output="n"
   regexp="y"
   group=""
   script="expGained"
   sequence="100"
  >
</trigger>
<trigger
   enabled="y"
   match="^You receive (.*) bonus experience points"
   omit_from_output="n"
   regexp="y"
   group=""
   script="bonusExpGained"
   sequence="100"
  >
</trigger>
<trigger
   match="^Below the flare, you hear (.*) scream '(.*)'"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleStart"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^\[\s+10 minutes of double exp started courtesy of (.*)\s+\]$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleStart"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^Double experience for 10 minutes courtesy of (.*)'s daily blessing.$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleStart"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^Double experience for 10 minutes courtesy of (.*).$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleStart"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^You hear a loud roar from (.*) and the world appears calmer for a while."
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleStart"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^INFO: Bonus experience has now expired\."
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleStop"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^Next (.*) mobs? killed will reward double experience[ ]*(.*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleDBStart"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^You have no daily blessing bonus experience kills remaining."
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleDBStop"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   match="^You receive (.*) \'rare kill\' experience bonus."
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="doubleRareKill"
   omit_from_output="n"
  >
  </trigger>
</triggers>

 <aliases>
   <alias
   match="^hxp ?(.*)?"
   enabled="y"
   regexp="y"
   sequence="100"
   send_to="12"
   script="expMain"
  >
  </alias>
  <alias match="^had help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
     </alias>
</aliases>
<script>
<![CDATA[
require "serialize"
require "gmcphelper"
require "tprint"
dofile(GetInfo(60) .. "aardwolf_colors.lua")
--require "themed_miniwindows"

--my_window = ThemedTextWindow("ExpWindow", 100, 100, 200, 150, "ExpTracker", "center", "no", "yes")

function interp(s, tab)
	if s == nil then
		hadarprint("@RYou forgot to fill in a message please use @Clevel help@R and run the message commands to see which one.")
	else
		return (s:gsub('($%b{})', function(w) return tab[w:sub(3, -2)] or w end))
	end
end

function hadarprint(str,level)

	if level == "debug" and expTracker["GL"].Debug == "yes" then
		AnsiNote(ColoursToANSI("@G[@YDEBUG@G]@W:@w"..str))
	elseif level == "error" then
          AnsiNote(ColoursToANSI("@R[@Mhxp @rERROR@R]@W:@w"..str))
     elseif level == "script" then
          AnsiNote(ColoursToANSI("@G[@CE@cxp@CT@cracker@G]@c"..str))
     else
		AnsiNote(ColoursToANSI(str))
	end
	
end

function OnPluginSaveState ()
	SetVariable ("expTracker", "expTracker = " .. serialize.save_simple (expTracker))
	SetVariable ("exppastfirstinstall", "true")
end -- function OnPluginSaveState

function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), "no"))
		return
	end -- they didn't enable us last time
	
	hadarprint("had help (to see all of hadar's plugin helpfiles), or hxp help to just see this one","script")
  
	OnPluginEnable ()
     
     for i = 23,0,-1 do 
          AddTimer ("Exp_timer_"..i, i, 0, 0, "", 3, "hourReport")
     end
end

function OnPluginEnable ()

	expTracker = {}
     expTracker["NR"] = {}
     expTracker["DL"] = {}
     expTracker["HR"] = {}
     expTracker["GL"] = {}
     expTracker["SN"] = {}
     expTracker["IN"] = {}
     
     
	if GetVariable ("exppastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("expTracker") or "")) ()
          injectVars()
	else
          hadarprint("Looks like this is your first install, Lets get you setup! hxp for help","script")
		injectVars()
	end
     
end

function checkExist(tbl, idx, val) 

     if not expTracker[tbl] then
          expTracker[tbl] = {}
     end

     if not expTracker[tbl][idx] then
               expTracker[tbl][idx] = val
               SetVariable("expTracker", serialize.save("expTracker")) 
     end
     
end

function injectVars()
     local v = {}
     v["NR"] = {}
     v["DL"] = {}
     v["HR"] = {}
     v["GL"] = {}
     v["SN"] = {}
     v["IN"] = {}
-----------global expTracker vars----------------------------
     v["GL"]["hour"] = "yes"
     v["GL"]["double"] = "yes"
     v["GL"]["normal"] = "yes"
     v["GL"]["Type"] = nil
     v["GL"]["commLog"] = "no"
     v["GL"]["mainWindow"] = "yes"
     v["GL"]["multiKill"] = "no"
     v["GL"]["commLogTab"] = nil
     v["GL"]["xpReport"] = "room"
     v["GL"]["Channel"] = "echo"
     v["GL"]["Logo"] = "@G[@CE@cxp@CT@cracker@G]@c"
     v["GL"].Debug = "no"
-----------Initilize Normal Variables------------------------
     v["NR"].startTime = 0
     v["NR"].totexp = 0
     v["NR"].sec = 0
     v["NR"].min = 0
     v["NR"].kills = 0
     v["NR"].reportAfter = 1
     v["NR"].message = "${logo}Your kill earned you @R${xp}@c for a @R${length}@c second fight for a total of - @R${totexp}@w"
------------Initilize hour variables-------------------------
     v["HR"].hourEXP = 0
     v["HR"].rareEXP = 0
     v["HR"].bonusEXP = 0
     v["HR"].totexp = 0
     v["HR"].mobsKilled = 0
     v["HR"].message = "${logo}Last Hour you killed @R${kills}@c for a total of @R${totexp}@c which is @R${xp}@c per second@w"
     v["HR"].repmessage = "${logo}Your Hour is currently at @R${kills}@c for a total of @R${totexp}@w"
-----------Initilize Double variables------------------------
     v["DL"].hourEXP = 0
     v["DL"].rareEXP = 0
     v["DL"].bonusEXP = 0
     v["DL"].totexp = 0
     v["DL"].mobsKilled = 0
     v["DL"].message = "${logo}Last double you got @R${kills}@c kills for a total of @R${totexp}@c which was @R${xp}@c a second@w"
     v["DL"].repmessage = "${logo}Your Double is currently at @R${kills}@c for a total of @R${totexp} @cWith an avg of @R${xp}@c exp/second@w"
-----------Initilize Session variables------------------------
     v["SN"].startTime = 0
     v["SN"].Active = "no"
     v["SN"].totexp = 0
     v["SN"].killexp = 0
     v["SN"].rareexp = 0
     v["SN"].bonusexp = 0
     v["SN"].mobsKilled = 0
     v["SN"].expPerSecond = 0
     v["SN"].expPerMinute = 0
     v["SN"].sec = 0
     v["SN"].min = 0
     v["SN"].message = "${logo}Your session was @R${day}@W:@R${hour}@W:@R${min}@W:@R${sec}@c long, netting @R${totexp}@G[@WK:@R${killexp}@W,B:@R${bonusexp}@W,R:@R${rareexp}@G]@c kills@W: @R${kills}@w"
-----------Initilize install variables-----------------------
     v["IN"].Installed = os.time()
     v["IN"].Date = os.date("*t")
     v["IN"].kills = 0
     v["IN"].Totexp = 0
     v["IN"].killexp = 0
     v["IN"].bonusEXP = 0
     v["IN"].rareExp = 0
     v["IN"].CombatStart = 0
     v["IN"].CombatEnd = 0
     v["IN"].TotalYears = 0
     v["IN"].TotalMonths = 0
     v["IN"].TotalDays = 0
     v["IN"].TotalHours = 0
     v["IN"].TotalMinutes = 0
     v["IN"].TotalSeconds = 0
     v["IN"].message = "${logo} @CI@cnstalled@W:@G${wday}@W,@G${month} ${day} ${year} @Ca@Ct @G${hour}@W:@G${min}@W:@G${sec} @CT@cotals@D[@CK@cills:@G${kills}@W, @CE@cxp@W:@G${totexp}@W, @CA@cvg@W:@G${avgkills}@D] @CB@creakDown@D[@CK@cill @CE@cxp@W:@G${killexp}@W, @CB@conus @CE@cxp@W:@G${bonusexp}@W, @CR@care @CE@cxp@W:@G${rareexp}@D]@W"
-------------------------------------------------------------

for a,b in pairs(v) do
     for c,d in pairs(b) do
          checkExist(a,c,d)
     end
end

end

----------------------------------------------------------------------------------------------------
--										 End Standard Template	    							  --
--																								  --
--								         Start Main Stuff										  --
----------------------------------------------------------------------------------------------------

function expMain(name,line,wc)
     local first, rest = wc[1]:match("(%w+)%s*(.*)")
     
     if first == nil then
          HadarHelp()
          return
     end
     
     first = string.lower(first)
     
     if first == "set" then
          expDoubleSet(rest)
     elseif first == "select" then
          expSelectReport(rest)
     elseif first == "channel" then
          expSetChannel(rest)
     elseif first == "debug" then
          if expTracker["GL"].Debug == "yes" then
               expTracker["GL"].Debug = "no"
               hadarprint("@CD@cebug messages turned @Goff@w")
               SaveState()
          else
               expTracker["GL"].Debug = "yes"
               hadarprint("@CD@cebug messages turned @Gon@w")
               SaveState()
          end
     elseif first == "help" then
          HadarHelp()
     elseif first == "see" then
          seeStatus(rest)
     elseif first == "off" then
          expTracker["GL"]["hour"] = "no"
          expTracker["GL"]["double"] = "no"
          expTracker["GL"]["normal"] = "no"
          hadarprint("All Messages turned @ROFF@w","script")
          SaveState()
     elseif first == "on" then
          expTracker["GL"]["hour"] = "yes"
          expTracker["GL"]["double"] = "yes"
          expTracker["GL"]["normal"] = "yes"
          hadarprint("All Messages turned @GON@w","script")
          SaveState()
     elseif first == "fullreset" then
          expTracker = {}
          injectVars()
          hadarprint("All Variables have been reset to default","script")
     elseif first == "show" then
          showReport(rest)
     elseif first == "session" then
          expSession(rest)
     elseif first == "report" then
          expWindow(rest)
     elseif first == "config" then
          expConfig(rest)
     elseif first == "alltime" then
          expINReport(rest)
     else
          HadarHelp()
     end
     
end

function expTimeDiff(t2,t1,script)
	local d1,d2,carry,diff = os.date('*t',t1),os.date('*t',t2),"no",{}
	local colMax = {60,60,24,os.date('*t',os.time{year=d1.year,month=d1.month+1,day=0}).day,12}
	d2.hour = d2.hour - (d2.isdst and 1 or 0) + (d1.isdst and 1 or 0) -- handle dst
	for i,v in ipairs({'sec','min','hour','day','month','year'}) do
		diff[v] = d2[v] - d1[v] + (carry and -1 or 0)
		carry = diff[v] < 0
		if carry then diff[v] = diff[v] + colMax[i] end
	end
	for i,v in pairs(diff) do
		expTracker[script][i] = v
	end
	return diff
end

function OnPluginBroadcast(msg, id, name, text)

	if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
		if (text == "char.status") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
		
			assert(loadstring("LoadInfo = "..gmcparg or "")) ()
			currentState = tonumber(gmcp("char.status.state"))
		
			for i,v in pairs(LoadInfo) do
				if i == "status" then
                         for k,l in pairs(v) do
                              if k == "state" and tonumber(l) == 8 then
                                   if expTracker["NR"].startTime == 0 then
                                        expTracker["IN"].CombatStart = os.time()
                                        expTracker["NR"].startTime = os.time()
                                   end
                              end
                         end
                    end
			end -- end for
		end --end if char status
	end
end

function expGained(name, line, wc)
     local t = utils.split(wc[1],"+")
     for i,v in pairs(t) do
          buildMessage(tonumber(v))
          expTracker["IN"].killexp = tonumber(expTracker["IN"].killexp)+tonumber(v)
          expTracker["HR"].hourEXP = tonumber(expTracker["HR"].hourEXP)+tonumber(v)
          expTracker["NR"].kills = expTracker["NR"].kills + 1
          expTracker["IN"].kills = expTracker["IN"].kills + 1
          if expTracker["DL"].Active == "yes" then
               expTracker["DL"].hourEXP = tonumber(expTracker["DL"].hourEXP)+tonumber(v)
          end
          
          if expTracker["SN"].Active == "yes" then
               expTracker["SN"].totexp = tonumber(expTracker["SN"].totexp)+tonumber(v)
               expTracker["SN"].killexp = tonumber(expTracker["SN"].killexp)+tonumber(v)
          end
     end
     expTracker["HR"].mobsKilled = tonumber(expTracker["HR"].mobsKilled)+1
     if expTracker["DL"].Active == "yes" then
          expTracker["DL"].mobsKilled = tonumber(expTracker["DL"].mobsKilled)+1
     end
     if expTracker["SN"].Active == "yes" then
          expTracker["SN"].mobsKilled = tonumber(expTracker["SN"].mobsKilled)+1
     end
     
end

function bonusExpGained(name, line, wc)
local t = utils.split(wc[1],"+")
     for i,v in pairs(t) do
          buildMessage(v)
          expTracker["IN"].bonusEXP = tonumber(expTracker["IN"].bonusEXP)+tonumber(v)
          expTracker["HR"].bonusEXP = tonumber(expTracker["HR"].bonusEXP)+tonumber(v)
          if expTracker["DL"].Active == "yes" then
               expTracker["DL"].bonusEXP = tonumber(expTracker["DL"].bonusEXP)+tonumber(v)
          end
          
          if expTracker["SN"].Active == "yes" then
               expTracker["SN"].totexp = tonumber(expTracker["SN"].totexp)+tonumber(v)
               expTracker["SN"].bonusexp = tonumber(expTracker["SN"].bonusexp)+tonumber(v)
          end
     end
end

function doubleRareKill(name, line, wc)
local t = utils.split(wc[1],"+")
     for i,v in pairs(t) do
          buildMessage(v)
          expTracker["IN"].rareExp = tonumber(expTracker["IN"].rareExp)+tonumber(v)
          expTracker["HR"].rareEXP = tonumber(expTracker["HR"].rareEXP)+tonumber(v)
          if expTracker["DL"].Active == "yes" then
               expTracker["DL"].rareEXP = tonumber(expTracker["DL"].rareEXP)+tonumber(v)
          end
          if expTracker["SN"].Active == "yes" then
               expTracker["SN"].totexp = tonumber(expTracker["SN"].totexp)+tonumber(v)
               expTracker["SN"].rareexp = tonumber(expTracker["SN"].rareexp)+tonumber(v)
          end
     end
     
end

function buildMessage(param)

     expTracker["NR"].totexp = tonumber(expTracker["NR"].totexp)+tonumber(param)
     expTracker["HR"].totexp = tonumber(expTracker["HR"].totexp)+tonumber(param)
     expTracker["IN"].Totexp = tonumber(expTracker["IN"].Totexp)+tonumber(param)
     if expTracker["DL"].Active == "yes" then
          expTracker["DL"].totexp = tonumber(expTracker["DL"].totexp)+tonumber(param)
     end
     
     expTracker["GL"].Type = "NR"
     
     if expTracker["NR"].startTime == 0 then
          expTracker["IN"].TotalSeconds = expTracker["IN"].TotalSeconds + 1
          if expTracker["IN"].TotalSeconds > 60 then
               local extra = expTracker["IN"].TotalSeconds - 60
               expTracker["IN"].TotalSeconds = 0 + extra
               expTracker["IN"].TotalMinutes = expTracker["IN"].TotalMinutes + 1
          end
          --hadarprint("Combat too short, nothing to report","script")
     else
          AddTimer ("makeexpoutput", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot, "makeOutputNormal") 
     end
end

function makeOutputNormal()
     if expTracker["NR"].startTime == 0 then
          expTracker["NR"].sec = 0
          expTracker["NR"].min = 0
          expTracker["IN"].TotalSeconds = expTracker["IN"].TotalSeconds + 1
          if expTracker["IN"].TotalSeconds > 60 then
               local extra = expTracker["IN"].TotalSeconds - 60
               expTracker["IN"].TotalSeconds = 0 + extra
               expTracker["IN"].TotalMinutes = expTracker["IN"].TotalMinutes + 1
          end
               
     else
          if os.time() == expTracker["NR"].startTime then
               expTimeDiff(os.time()+1,expTracker["NR"].startTime,"NR")
               expTimeDiff(os.time()+1,expTracker["IN"].CombatStart,"IN")
          else
               expTimeDiff(os.time(),expTracker["NR"].startTime,"NR")
               expTimeDiff(os.time(),expTracker["IN"].CombatStart,"IN")
          end
          
          --[[
          Lets do some setting up the total time in combat score
          ]]
     
          expTracker["IN"].TotalYears = expTracker["IN"].TotalYears + expTracker["IN"].year
          expTracker["IN"].TotalMonths = expTracker["IN"].TotalMonths + expTracker["IN"].month
          expTracker["IN"].TotalDays = expTracker["IN"].TotalDays + expTracker["IN"].day
          expTracker["IN"].TotalHours = expTracker["IN"].TotalHours + expTracker["IN"].hour
          expTracker["IN"].TotalMinutes = expTracker["IN"].TotalMinutes + expTracker["IN"].min
          expTracker["IN"].TotalSeconds = expTracker["IN"].TotalSeconds + expTracker["IN"].sec
     
          if expTracker["IN"].TotalSeconds > 60 then
               local extra = expTracker["IN"].TotalSeconds - 60
               expTracker["IN"].TotalSeconds = 0 + extra
               expTracker["IN"].TotalMinutes = expTracker["IN"].TotalMinutes + 1
          end
          if expTracker["IN"].TotalMinutes > 60 then
               local extra = expTracker["IN"].TotalMinutes - 60
               expTracker["IN"].TotalMinutes = 0 + extra
               expTracker["IN"].TotalHours = expTracker["IN"].TotalHours + 1
          end
          if expTracker["IN"].TotalHours > 24 then
               local extra = expTracker["IN"].TotalHours - 24
               expTracker["IN"].TotalHours = 0 + extra
               expTracker["IN"].TotalDays = expTracker["IN"].TotalDays + 1
          end
          if expTracker["IN"].TotalDays > 30 then
               local extra = expTracker["IN"].TotalDays - 30
               expTracker["IN"].TotalDays = 0 + extra
               expTracker["IN"].TotalMonths = expTracker["IN"].TotalMonths + 1
          end
          if expTracker["IN"].TotalMonths > 12 then
               local extra = expTracker["IN"].TotalMonths - 12
               expTracker["IN"].TotalMonths = 0 + extra
               expTracker["IN"].TotalYears = expTracker["IN"].TotalYears + 1
          end
          
     end--end if starttime == 0
     
     
     local exprate = expTracker["NR"].totexp
     
     if expTracker["NR"].sec == 0 and expTracker["NR"]["min"] == 0 and expTracker["GL"].Type == "NR" then
          expTracker["NR"].sec = 1
     end
     
     local expsec = tonumber(expTracker["NR"].sec)+tonumber(expTracker["NR"].min)*60
     
     expTracker["NR"].expsec = tonumber(expTracker["NR"].sec)+tonumber(expTracker["NR"].min)*60
     expTracker["NR"].rate = tonumber(exprate)/tonumber(expsec)
     expTracker["NR"].rate = tonumber(string.format("%2.2g",expTracker["NR"].rate))
     expTracker["GL"].Type = "NR"
     
     charstatus = gmcp("char.status") -- fetch char.status and return it as a Lua table
     myState = tonumber(charstatus.state)
     
     if expTracker["GL"]["multiKill"] == "yes" then
          if expTracker["NR"].kills >= expTracker["NR"].reportAfter and tonumber(myState) == 8 and expTracker["GL"]["xpReport"] == "room" then
               expTracker["NR"].totexp = 0
          elseif expTracker["NR"].kills >= expTracker["NR"].reportAfter and tonumber(myState) == 8 and expTracker["GL"]["xpReport"] == "mob" then
               makeOutput()
               expTracker["NR"].totexp = 0
               expTracker["NR"].kills = 0
               expTracker["NR"].startTime = os.time()
               expTracker["NR"].sec = 0
               expTracker["NR"].min = 0
          else
               makeOutput()
          end
     end
     
     if expTracker["GL"]["multiKill"] == "no" then
          if tonumber(myState) == 8 and expTracker["GL"]["xpReport"] == "room" then
               --expTracker["NR"].totexp = 0
          elseif tonumber(myState) == 8 and expTracker["GL"]["xpReport"] == "mob" then
               makeOutput()
               expTracker["NR"].totexp = 0
               expTracker["NR"].startTime = os.time()
               expTracker["NR"].sec = 0
               expTracker["NR"].min = 0
          else
               makeOutput()
               expTracker["NR"].totexp = 0
               expTracker["NR"].startTime = 0
               expTracker["NR"].sec = 0
               expTracker["NR"].min = 0
          end
     end
end

function makeOutput()
     local message
     
     if expTracker["GL"]["normal"] == "no" and expTracker["GL"]["hour"] == "no" and expTracker["GL"]["double"] == "no" then return end

     if expTracker["GL"].Type == "NR" and expTracker["GL"]["normal"] == "yes" then
          message = interp(expTracker["NR"].message, {xp = comma_value(expTracker["NR"].rate), totexp = comma_value(expTracker["NR"].totexp), length = expTracker["NR"].expsec,logo = expTracker["GL"].Logo})
     elseif expTracker["GL"].Type == "HR" and expTracker["GL"]["hour"] == "yes" then
          message = interp(expTracker["HR"].message, {xp = comma_value(expTracker["HR"].rate), totexp = comma_value(expTracker["HR"].totexp), kills = comma_value(expTracker["HR"].mobsKilled),logo = expTracker["GL"].Logo})
     elseif expTracker["GL"].Type == "DL" and expTracker["GL"]["double"] == "yes" then
          message = interp(expTracker["DL"].message, {xp = comma_value(expTracker["DL"].rate), totexp = comma_value(expTracker["DL"].totexp), kills = comma_value(expTracker["DL"].mobsKilled),logo = expTracker["GL"].Logo})
     elseif expTracker["GL"].Type == "SN" then
          message = interp(expTracker["SN"].message, {
          month = expTracker["SN"].month,
          day = expTracker["SN"].day,
          hour = expTracker["SN"].hour,
          min = expTracker["SN"].min,
          sec = expTracker["SN"].sec,
          totexp = comma_value(expTracker["SN"].totexp),
          killexp = comma_value(expTracker["SN"].killexp),
          rareexp = comma_value(expTracker["SN"].rareexp),
          bonusexp = comma_value(expTracker["SN"].bonusexp),
          kills = comma_value(expTracker["SN"].mobsKilled),
          expsec = expTracker["SN"].expPerSecond,
          expmin = expTracker["SN"].expPerMinute,
          logo = expTracker["GL"].Logo})
     end
     
     if message ~= nil then
          
          if expTracker["GL"]["mainWindow"] == "yes" then
               if expTracker["GL"]["Channel"] == "echo" or expTracker["GL"]["Channel"] == "print" then
                    hadarprint(message)
               else
                    SendSpecial(expTracker["GL"]["Channel"] .. " " ..message)
               end
          end
          
          if expTracker["GL"]["commLog"] == "yes" then
               CallPlugin("b555825a4a5700c35fa80780","storeFromOutside",message, expTracker["GL"]["commLogTab"], "yes")
          end
          
          if expTracker["GL"]["commLog"] == "no" and expTracker["GL"]["mainWindow"] == "no" then
               hadarprint("You have both reporting to Comm log and reporting to main window off, cant report","error")
          end
          
     end
end

function expDoubleSet(param)
     param = string.lower(param)
     if param == "normal" then
          HadarBackup = expTracker["NR"].message
		expTracker["NR"].message = utils.inputbox ("${logo} - Shows the logo of the script\n${xp} - shows the rate of exp earned per second\n${totexp} - shows total exp earned\n${length} - how long in seconds the fight took", "look of normal exp tracker", expTracker["NR"].message, "Courier", 9)
		
		if expTracker["NR"].message ~= nil then
			hadarprint("Kills message will look like@W: @w"..expTracker["NR"].message,"script")
		else
			expTracker["NR"].message = HadarBackup
		end
     elseif param == "double" then
          HadarBackup = expTracker["DL"].message
		expTracker["DL"].message = utils.inputbox ("${logo} - Shows the logo of the script\n${xp} - shows the rate of exp earned per second\n${totexp} - shows total exp earned\n${kills} - shows how many kills you got", "look of double exp tracker", expTracker["DL"].message, "Courier", 9)
		
          if expTracker["DL"].message ~= nil then
			hadarprint("Double message will look like@W: @w"..expTracker["DL"].message,"script")
		else
			expTracker["DL"].message = HadarBackup
		end
     elseif param == "hour" then
          HadarBackup = expTracker["HR"].message
		expTracker["HR"].message = utils.inputbox ("${logo} - Shows the logo of the script\n${xp} - shows the rate of exp earned per second\n${totexp} - shows total exp earned\n${kills} - shows how many kills you got", "look of hour tracker", expTracker["HR"].message, "Courier", 9)
		
		if expTracker["NR"].message ~= nil then
			hadarprint("Hourly message will look like@W: @w"..expTracker["NR"].message,"script")
		else
			expTracker["NR"].message = HadarBackup
		end
     elseif param == "logo" then
          HadarBackup = expTracker["GL"]["Logo"]
		expTracker["GL"]["Logo"] = utils.inputbox ("How you would like the logo to look if using it", "Logo", expTracker["GL"]["Logo"], "Courier", 9)
		
		if expTracker["GL"]["Logo"] ~= nil then
			hadarprint("Logo will look like@W: @w"..expTracker["GL"].Logo,"script")
		else
			expTracker["GL"]["Logo"] = HadarBackup
		end
     elseif param == "session" then
          HadarBackup = expTracker["SN"].message
		expTracker["SN"].message = utils.inputbox ("${month} - shows if session has been running a month\n${day} - shows if session has been running 1+ days\n${hour} - session hours\n${min} - session minutes\n${sec} - session seconds\n${totexp} - total exp over session\n${killexp} - how much exp from just kills\n${rareexp} - rare mobs exp\n${bonusexp} - bonus exp\n${kills} - how many kills\n${logo} - shows logo", "Logo", expTracker["GL"]["Logo"], "Courier", 9)
		
		if expTracker["SN"].message ~= nil then
			hadarprint("Session message will look like@W: @w"..expTracker["SN"].message,"script")
		else
			expTracker["SN"].message = HadarBackup
		end
     elseif param == "hrreport" then
          HadarBackup = expTracker["HR"]["repmessage"]
		expTracker["HR"]["repmessage"] = utils.inputbox ("${kills} - shows how many kills you have so far\n${totexp} - shows how much total exp earned so far", "Hourly Report", expTracker["HR"]["repmessage"], "Courier", 9)
		
		if expTracker["HR"]["repmessage"] ~= nil then
			hadarprint("Hour report will look like@W: @w"..expTracker["HR"]["repmessage"],"script")
		else
			expTracker["HR"]["repmessage"] = HadarBackup
		end
     elseif param == "dblreport" then
          HadarBackup = expTracker["DL"]["repmessage"]
		expTracker["DL"]["repmessage"] = utils.inputbox ("${kills} - shows how many kills you have so far\n${totexp} - shows how much total exp earned so far", "Hourly Report", expTracker["DL"]["repmessage"], "Courier", 9)
		
		if expTracker["DL"]["repmessage"] ~= nil then
			hadarprint("Hour report will look like@W: @w"..expTracker["DL"]["repmessage"],"script")
		else
			expTracker["DL"]["repmessage"] = HadarBackup
		end
     elseif param == "alltime" then
          HadarBackup = expTracker["IN"]["message"]
		expTracker["IN"]["repmessage"] = utils.inputbox ("${logo} - Displays logo\n${wday} - Displays day of the week\n${month} - Displays month of install\n${year} - Displays year of install\n${day} - displays day of install\n${hour} - Displays hour of install\n${min} - displays minute of install\n${sec} - displays second of install\n${kills} - shows kills exp\n${totexp} - shows total exp\n${avgkills} - shows average exp of all kills\n${killexp} - shows exp of only kills\n${bonusexp} - shows bonus exp\n${rareexp} - shows rare exp", "All Time Report", expTracker["IN"]["message"], "Courier", 9)
		
		if expTracker["IN"]["message"] ~= nil then
			hadarprint("Hour report will look like@W: @w"..expTracker["IN"]["message"],"script")
		else
			expTracker["IN"]["repmessage"] = HadarBackup
		end
          
     else
          hadarprint("@cYou need to input one of the following@w: @Gnormal@w, @Gdouble@w,@G hour@w, @Glogo @Wor @Gsession @C.@c.@C. @YEG:@R xhp set normal@w","error")
     end
     SaveState()
end

function doubleStart()
     expTracker["DL"].Active = "yes"
     expTracker["DL"].startTime = os.time()
end

function doubleStop()
     
     expTimeDiff(os.time(),expTracker["DL"].startTime,"DL")
     expTracker["GL"].Type = "DL"
     local exprate = expTracker["DL"].totexp
     local expsec = tonumber(expTracker["DL"].sec)+tonumber(expTracker["DL"].min)*60
     expTracker["DL"].rate = string.format ("%2.5g", (tonumber(exprate)/tonumber(expsec)))
     
     makeOutput()
     
     expTracker["DL"].Active = "no"
     expTracker["DL"].totexp = 0
     expTracker["DL"].hourEXP = 0
     expTracker["DL"].bonusEXP = 0
     expTracker["DL"].rareExp = 0
     expTracker["DL"].mobsKilled = 0
end

function doubleDBStart()
    --maybe ill add a future thing to track how you used your db doubles
end

function doubleDBStop()
     --maybe ill add a future thing to track how you used your db doubles
end

function hourReport()

     local expsec = 3600
     local exprate = expTracker["HR"].totexp
     
     expTracker["HR"].rate = string.format ("%2.5g", (tonumber(exprate)/tonumber(expsec)))
    
     expTracker["GL"].Type="HR"
          
     makeOutput()
     
     expTracker["HR"].hourEXP = 0
     expTracker["HR"].rareEXP = 0
     expTracker["HR"].bonusEXP = 0
     expTracker["HR"].totexp = 0
     expTracker["HR"].mobsKilled = 0
end

function expSetChannel(str)
     if str ~= nil and str ~= "" and str ~= " " then
		expTracker["GL"].Channel = str
		hadarprint("Default channel set to@w: @G" .. expTracker["GL"].Channel,"script")
	else
          hadarprint("Current Channel:"..expTracker["GL"].Channel,script)
		hadarprint("@cPlease use the following command@W:@Ghxp channel <channel you want to output to>@w","error")
	end
     
     SaveState()
end

function expSelectReport(param)
     param = string.lower(param)
     
     if param == "hour" then
          if expTracker["GL"]["hour"] == "yes" then
               expTracker["GL"]["hour"] = "no"
               hadarprint("You will now @RNOT@c report exp on the hour","script")
          else
               expTracker["GL"]["hour"] = "yes"
               hadarprint("You will now @Greport@c exp on the hour","script")
          end
     elseif param == "double" then
          if expTracker["GL"]["double"] == "yes" then
               expTracker["GL"]["double"] = "no"
               hadarprint("You will now @RNOT@c report exp after double","script")
          else
               expTracker["GL"]["double"] = "yes"
               hadarprint("You will now @Greport@c exp after double","script")
          end
     elseif param == "kill" or param == "kills" then
          if expTracker["GL"]["normal"] == "yes" then
               expTracker["GL"]["normal"] = "no"
               hadarprint("You will now @RNOT@c report exp after a kill","script")
          else
               expTracker["GL"]["normal"] = "yes"
               hadarprint("You will now @Greport@c exp after a kill","script")
          end
     else
          hadarprint("@cPlease use the following command@W:@Ghxp select <hour or double or kill>@w","error")
     end
     
     SaveState()
end

function seeStatus(param)
     if param == nil then
          hadarprint("To see status it cant be blank please choose, hour, double or kill","error")
          return
     end
     
     param = string.lower(param)
     
     if param == "hour" then
          if expTracker["GL"]["hour"] == "yes" then hadarprint("Hour is @Gactive@w","script") else hadarprint("Hour is @Rinactive@w","script") end
     elseif param == "double" then
          if expTracker["GL"]["double"] == "yes" then hadarprint("Double is @Gactive@w","script") else hadarprint("Double is @Rinactive@w","script") end
     elseif param == "kill" or param == "kills" then
          if expTracker["GL"]["normal"] == "yes" then hadarprint("Kills is @Gactive@w","script") else hadarprint("Kills is @Rinactive@w","script") end
     else
          if expTracker["GL"]["hour"] == "yes" then hadarprint("Hour is @Gactive@w","script") else hadarprint("Hour is @Rinactive@w","script") end
          if expTracker["GL"]["double"] == "yes" then hadarprint("Double is @Gactive@w","script") else hadarprint("Double is @Rinactive@w","script") end
          if expTracker["GL"]["normal"] == "yes" then hadarprint("Kills is @Gactive@w","script") else hadarprint("Kills is @Rinactive@w","script") end
     end
end

function expSession(str)
     if str == nil then
          hadarprint("You need to give an argument","error")
          return
     end
     
     if str == "start" then
          if expTracker["SN"].Active ~= "yes" then
               expTracker["SN"].Active = "yes"
               expTracker["SN"].startTime = os.time()
               hadarprint("You have started an exp Session, use @Ghxp session stop@c to end","script")
               SaveState()
          else
               hadarprint("You already have a session running use @Ghxp session stop@c to end","script")
          end
     elseif str == "stop" then
     
          if expTracker["SN"].Active == "yes" then
          
          expTimeDiff(os.time(),expTracker["SN"].startTime,"SN")
          expTracker["GL"].Type = "SN"
          local exprate = expTracker["SN"].totexp
          
          local expsec = tonumber(expTracker["SN"].sec)+tonumber(expTracker["SN"].min)*60
          local expmin1 = math.ceil(tonumber(expTracker["SN"].sec)/60)
          local expmin2 = tonumber(expTracker["SN"].min)
          local expmin3 = math.floor(tonumber(expTracker["SN"].hour)*60)
          local expmin = expmin1+expmin2+expmin3
          
          expTracker["SN"].expPerSecond = string.format ("%2.5g", (tonumber(exprate)/tonumber(expsec)))
          expTracker["SN"].expPerMinute = string.format ("%2.5g", (tonumber(exprate)/tonumber(expmin)))

          makeOutput()
          
          expTracker["SN"].totexp = 0
          expTracker["SN"].killexp = 0
          expTracker["SN"].rareexp = 0
          expTracker["SN"].bonusexp = 0
          expTracker["SN"].mobsKilled = 0
          expTracker["SN"].expPerSecond = 0
          expTracker["SN"].expPerMinute = 0
          expTracker["SN"].Active = "no"
          
          SaveState()
          
          else
               hadarprint("You DO NOT have a session running use @Ghxp session start@c to begin","script")
          end
     elseif str == "status" then
     
          if expTracker["SN"].Active == "yes" then
               local exprate = expTracker["SN"].totexp
          
               local expsec = tonumber(expTracker["DL"].sec)+tonumber(expTracker["DL"].min)*60
               local expmin = math.ceil(tonumber(expTracker["DL"].sec)/60)+tonumber(expTracker["DL"].min)+math.floor(tonumber(expTracker["DL"].hour)*60)
          
               expTracker["SN"].expPerSecond = string.format ("%2.5g", (tonumber(exprate)/tonumber(expsec)))
               expTracker["SN"].expPerMinute = string.format ("%2.5g", (tonumber(exprate)/tonumber(expmin)))
               expTimeDiff(os.time(),expTracker["SN"].startTime,"SN")
               expTracker["GL"].Type = "SN"

               makeOutput()
          else
               hadarprint("You DO NOT have a session running use @Ghxp session start@c to begin","script")
          end
     else
          hadarprint("@cPlease use the following command@W:@Ghxp session <start|stop|status>@w","error")
     end
end

function showReport(report)
     local repchan
     
     if report == nil then
          hadarprint("You need to supply a type, EG hxp show hour say","error")
          return
     end
     
     local first, second = report:match("(%w+)%s*(.*)")
     
     if second == nil or second == "" or second == " " then
          repchan = expTracker["GL"].Channel
     else
          repchan = rest
     end
     
     if first == "double" and expTracker["DL"].Active == "yes" then
          expTimeDiff(os.time(),expTracker["DL"].startTime,"DL")
          expTracker["GL"].Type = "DL"
          local exprate = expTracker["DL"].totexp
          local expsec = tonumber(expTracker["DL"].sec)+tonumber(expTracker["DL"].min)*60
          expTracker["DL"].rate = string.format ("%2.5g", (tonumber(exprate)/tonumber(expsec)))
          local repmsg = interp(expTracker["DL"].repmessage, {xp = expTracker["DL"].rate,totexp = expTracker["DL"].totexp, kills = expTracker["DL"].mobsKilled,logo = expTracker["GL"].Logo})
          
          if repchan == "echo" or repchan == "print" then
               hadarprint(repmsg,"script")
          else
               SendSpecial(repchan .. " " .. repmsg)
          end
     elseif first == "double" and expTracker["DL"].Active == "no" then
          hadarprint("Double is not currently running","error")
     end
     
     if first == "hour" and expTracker["GL"]["hour"] == "yes" then
          local repmsg = interp(expTracker["HR"].repmessage, {totexp = expTracker["HR"].totexp, kills = expTracker["HR"].mobsKilled,logo = expTracker["GL"].Logo})
          if repchan == "echo" or repchan == "print" then
               hadarprint(repmsg,"script")
          else
               SendSpecial(repchan .. " " .. repmsg)
          end
     end
end

function expWindow(str)
     if str == nil or str == "" or str == " " then
          hadarprint("@cYou need to give an argument EG: @Ghxp report main","error")
          return
     end
     
     local first, second = str:match("(%w+)%s*(.*)")
     
     first = string.lower(first)
     
     if second == " " or second == "" then
          second = nil
     end
       

     if first == "main" and second == nil then
          if expTracker["GL"]["mainWindow"] == "yes" then
               expTracker["GL"]["mainWindow"] = "no"
               hadarprint("You will @RNOT @creport exp to the main window","script")
          else
               expTracker["GL"]["mainWindow"] = "yes"
               hadarprint("You @GWILL@c report exp to the main window","script")
          end
     elseif first == "main" and second == "on" then
          expTracker["GL"]["mainWindow"] = "yes"
          hadarprint("You @GWILL@c report exp to the main window","script")
     elseif first == "main" and second == "off" then
          expTracker["GL"]["mainWindow"] = "no"
          hadarprint("You will @RNOT @creport exp to the main window","script")
     elseif first == "comm" and second == nil then
          if expTracker["GL"]["commLog"] == "yes" then
               expTracker["GL"]["commLog"] = "no"
               hadarprint("You will @RNOT @creport exp to the comm window","script")
          else
               expTracker["GL"]["commLog"] = "yes"
               hadarprint("You @GWILL@c report exp to the comm window","script")
          end
     elseif first == "comm" and second == "on" then
          expTracker["GL"]["commLog"] = "yes"
          hadarprint("You @GWILL@c report exp to the main window","script")
     elseif first == "comm" and second == "off" then
          expTracker["GL"]["commLog"] = "no"
          hadarprint("You will @RNOT @creport exp to the main window","script")
     end
     
     if second ~= nil and second ~= "on" and second ~= "off" then
          expTracker["GL"]["commLogTab"] = second
          hadarprint("You will now report exp to the @W"..second.."@w communication log","script")
     end
     
     SaveState()
end

function expConfig(str)

     if str == nil or str == "" or str == " " then
          hadarprint("@cYou need to give an argument EG: @Ghxp config room","error")
          return
     end
     
     local first, second = str:match("(%w+)%s*(.*)")
     
     first = string.lower(first)
     
     if second == " " or second == "" then
          second = nil
     end

     if first == "room" then
          expTracker["GL"]["xpReport"] = "room"
          hadarprint("You will now track timer over the full room kills","script")
     elseif first == "mob" then
          expTracker["GL"]["xpReport"] = "mob"
          hadarprint("You will reset timer after each mob is killed","script")
     elseif first == "report" then
     
          if second == "enable" then
               expTracker["GL"]["multiKill"] = "yes"
               hadarprint("You have now @GENABLED@c multi kills","script")
               return
          elseif second == "disable" then
               expTracker["GL"]["multiKill"] = "no"
               hadarprint("You have now @RDISABLED@c multi kills","script")
               return
          end
          second = tonumber(second)
          
          if second == nil then
               hadarprint("You need to supply a number, EG. @Ghxp config report 3@w","error")
               return
          end
          
          if type(second) == "number" then
               expTracker["NR"].reportAfter = second
               hadarprint("@cYou will report exp gained per second after @R"..second.."@c kills@w","script")
          end
     end
end

local function getDay(val)
     local str
     if val == 1 then
          str = "@CS@cunday"
     elseif val == 2 then
          str = "@CM@conday"
     elseif val == 3 then
          str = "@CT@cuesday"
     elseif val == 4 then
          str = "@CW@cednesday"
     elseif val == 5 then
          str = "@CT@chursday"
     elseif val == 6 then
          str = "@CF@criday"
     elseif val == 7 then
          str = "@CS@caturday"
     end
          
     return str
end
     
function getMonth(val)
     local str
     if val == 1 then
          str = "@CJ@can@W."
     elseif val == 2 then
          str = "@CF@ceb@W."
     elseif val == 3 then
          str = "@CM@car@W."
     elseif val == 4 then
          str = "@CA@cpr@W."
     elseif val == 5 then
          str = "@CM@cay"
     elseif val == 6 then
          str = "@CJ@cun@W."
     elseif val == 7 then
          str = "@CJ@cul@W."
     elseif val == 8 then
          str = "@CA@cug@W."
     elseif val == 9 then
          str = "@CS@cept@W."
     elseif val == 10 then
          str = "@CO@cct@W."
     elseif val == 11 then
          str = "@CN@cov@W."
     elseif val == 12 then
          str = "@CD@cec@W."
     end
         
     return str
end

function expINReport(str)
     if str == nil or str == "" or str == " " then 
     
     local expdate = getDay(expTracker["IN"].Date.wday) .. "@W, " .. getMonth(expTracker["IN"].Date.month) .. " @G" .. expTracker["IN"].Date.day .. " @G" .. expTracker["IN"].Date.year
     local exptime = "@G"..expTracker["IN"].Date.hour.."@W:@G"..expTracker["IN"].Date.min.."@W:@G"..expTracker["IN"].Date.sec
     local expdatetime = expdate .. " @Dat " .. exptime .. "@w"
     local DTlen = string.len(strip_colours(expdatetime))
     local math1 = 50-DTlen
     
     local years = expTracker["IN"].TotalYears
     local months = expTracker["IN"].TotalMonths
     local days = expTracker["IN"].TotalDays
     local hours = expTracker["IN"].TotalHours
     local minutes = expTracker["IN"].TotalMinutes
     local seconds = expTracker["IN"].TotalSeconds
     
     local kills = expTracker["IN"].kills
     local totexp = expTracker["IN"].Totexp
     local bonusxp = expTracker["IN"].bonusEXP
     local rarexp = expTracker["IN"].rareExp
     
     local avgkills = totexp/kills
     
     hadarprint("@x165+@x247----------------------------@x046[@CE@cxp @CR@ceport@x046]@x247------------------------------@x165+@w")
     hadarprint("@x165|                                                                      |")
     hadarprint("@x165|                     @CT@Dracker @CS@Dtarted @CT@Dracking @Co@Dn@W:                     @x165|")
     hadarprint("@x165|                    "..string.format("%-"..DTlen.."s%"..math1.."s",expdatetime," ").."@x165|")
     hadarprint("@x165|                                                                      |")
     hadarprint("@x165|     @CK@Dills@W: @x156"..string.format("%-10s",comma_value(expTracker["IN"].kills)).."  @CT@Dotal @CE@Dxp@W: @x156"..string.format("%-10s",comma_value(totexp)).."   @CA@Dvg @CE@Dxp@W: @x156"..string.format("%.1f",avgkills).."        @x165|")
     hadarprint("@x165|            @CB@Donus @CE@Dxp@W: @x156"..string.format("%-10s",comma_value(bonusxp)).."    @CR@Dare @CE@Dxp@W: @x156"..string.format("%-10s",comma_value(rarexp)).."             @x165|")
     hadarprint("@x165|                                                                      |")
     hadarprint("@x165|                    @CY@Dou @CH@Dave @Cb@Deen @Ci@Dn @Cc@Dombat @Cf@Dor@W:                      @x165|")
     hadarprint("@x165|   @CY@Dears@W: @x156"..string.format("%-3s",years).." @CM@Donths@W: @x156"..string.format("%-2s",months).." @CD@Days@W: @x156"..string.format("%-2s",days).." @CH@Dours@W: @x156"..string.format("%-2s",hours).." @CM@Dinutes@W: @x156"..string.format("%-2s",minutes).." @CS@Deconds@W: @x156"..string.format("%-2s",seconds).."   @x165|")
     hadarprint("@x165|                                                                      |")
     hadarprint("@x165+@x247----------------------------------------------------------------------@x165+@w")
     
     else
     
          local kills = expTracker["IN"].kills
          local totexp = expTracker["IN"].Totexp
     
          local avgkills = totexp/kills
     
          local repmsg = interp(expTracker["IN"].message, {
          wday = getDay(expTracker["IN"].Date.wday),
          month = getMonth(expTracker["IN"].Date.month),
          year = expTracker["IN"].Date.year,
          day = expTracker["IN"].Date.day,
          hour = expTracker["IN"].Date.hour,
          min = expTracker["IN"].Date.min,
          sec = expTracker["IN"].Date.sec,
          kills = comma_value(expTracker["IN"].kills),
          totexp = comma_value(totexp),
          avgkills = string.format("%.1f",avgkills),
          killexp = comma_value(expTracker["IN"].killexp),
          bonusexp = comma_value(expTracker["IN"].bonusEXP),
          rareexp = comma_value(expTracker["IN"].rareExp),
          logo = expTracker["GL"].Logo
          })
          
          SendSpecial(str.." "..repmsg)
     end
     
end

function comma_value(n) -- credit http://richard.warburton.it
	local left,num,right = string.match(n,'^([^%d]*%d)(%d*)(.-)$')
	return left..(num:reverse():gsub('(%d%d%d)','%1,'):reverse())..right
end

--[[function setWindowText()
     my_window:clear()
     my_window:add_text("I have gained "..expTracker["NR"].totexp.." exp")
end]]

function HadarHelp()
hadarprint("@x086+-------------------------@g[@CE@cxp@CT@cracker @WV:"..GetPluginInfo (GetPluginID (), 19).."@g]@c086--------------------------+")
hadarprint("@x086| @x214hxp help                @x110- @x214Displays this helpfile                    @x086 |")
hadarprint("@x086| @x208hxp select <type>       @x110- @x208Toggles xp tracker (hour,double,kills) @x086    |")
hadarprint("@x086|                           @REG@W.@G hxp select kills@x208 to turn it off        @x086|")
hadarprint("@x086| @x214hxp channel <channel>   @x110- @x214no arguments displays the channel      @x086    |")
hadarprint("@x086|                           @REG@W.@G hxp channel spouse                     @x086|")
hadarprint("@x086| @x208hxp see <all|type>      @x110- @x208Shows you if type is active all shows all@x086  |")
hadarprint("@x086| @x214hxp show <type>         @x110- @x214Shows current hour or double(if running)@x086   |")
hadarprint("@x086| @x208hxp report <scren> <log>@x110- @x208screen main or comm, log = comm log@x086        |")
hadarprint("@x086|                           @REG@W.@G hxp report comm expTracker            @x086 |")
hadarprint("@x086|                           @REG@W.@G hxp report main off                   @x086 |")
hadarprint("@x086| @x214hxp session <command>   @x110- @x214Start, Stop, Status .. tracks exp/kill over@x086|")
hadarprint("@x086|                           @x214a time between start and stop@x086              |")
hadarprint("@x086| @x208hxp set <thing>         @x110- @x208Sets the message output for reports @x086       |")
hadarprint("@x086|                         @x110  @G(@x208kill@W,@x208double@W,@x208hour@W,@x208logo@W,@x208session@W,@x208dblreport@G)  @x086|")
hadarprint("@x086|                         @x110  @G(@x208hrreport@W,@x208alltime@G)                         @x086|")
hadarprint("@x086| @x214hxp config <room|mob>   @x110- @x214Choose to reset timer after a mob or room  @x086|")
hadarprint("@x086|  @x214\"    \"    report       @x110  @x214enable|disable, # EG. @Ghxp config report 3@w  @x086|")
hadarprint("@x086|                         @x110  @x214will change the report from per mob to #   @x086|")
hadarprint("@x086| @x208hxp alltime <channel>   @x110- @x208without channel displays info              @x086|")
hadarprint("@x086|                           @x208use channel to edit                        @x086|")
hadarprint("@x086+----------------------------------------------------------------------+")
end


]]>
</script> 

</muclient>
