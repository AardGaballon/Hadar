<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Hadars_PluginManagement"
   author="Hadar"
   id="15bf0c926513966c26478da0"
   language="Lua"
   purpose="Manage and maintain multiple scripts from github"
   save_state="y"
   date_written="2020-06-19 00:00:00"
   requires="4.00"
   version="1.70"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers

<trigger
   enabled="y"
   match=""
   omit_from_output="y"
   regexp="y"
   group=""
   script=""
   sequence="100"
  >
</trigger>

  -->

<triggers>

</triggers>

<!-- Alias
<alias
   script=""
   match=""
   enabled="y"
   regexp="y"
   group=""
   sequence="100"
  >
  </alias>
 -->

<aliases>
     <alias
     script="pmMain"
     match="^hpm ?(.*)?$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="updatePlugin"
     match="^#updatePlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="reloadPlugin"
     match="^#reloadPlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="removePlugin"
     match="^#removePlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="installPlugin"
     match="^#installPlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias match="^had help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
     </alias>
</aliases>



<script>
<![CDATA[
require "serialize"
require "tprint"
local json = require("json")
dofile(GetInfo(60) .. "aardwolf_colors.lua")
local aSlist = "plugin"

local gitHubRaw = "https://raw.githubusercontent.com/zzyzzyzzx/Hadar/master/ZZZZZZ(Repo)/github.list"
local gitHubBeta = "https://raw.githubusercontent.com/zzyzzyzzx/HadarBeta/master/Repos/devlist.list"
local rawPluginUrl
local rawPluginUrlBeta
  

function interp(s, tab)
	if s == nil then
		hadarprint("@RYou forgot to fill in a message please use @Clevel help@R and run the message commands to see which one.")
	else
		return (s:gsub('($%b{})', function(w) return tab[w:sub(3, -2)] or w end))
	end
end

function hadarprint(str,level)

	if level == "error" then
          AnsiNote(ColoursToANSI("@R[@MHPM @rERROR@R]@W:@w"..str))
     elseif level == "script" then
          AnsiNote(ColoursToANSI("@G[@CH@cP@CM]@c "..str))
     else
		AnsiNote(ColoursToANSI(str))
	end
	
end

function OnPluginSaveState ()
	SetVariable ("hpmVar", "hpmVar = " .. serialize.save_simple (hpmVar))
	SetVariable ("hpmpastfirstinstall2", "true")
end -- function OnPluginSaveState


function OnPluginInstall ()
     PLUGIN_VERSION  = GetPluginInfo(GetPluginID(), 19)
     PLUGIN_NAME   = GetPluginInfo(GetPluginID(), 1)
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
	
	hadarprint("had help (to see all of hadar's plugin helpfiles), or hpm help to just see this one","script")
  
	OnPluginEnable ()
end

function OnPluginEnable ()

     hpmVar = {}
     hpmVar["cache"] = {}
     hpmVar["betaCache"] = {}
     ghName = nil

     if GetVariable ("hpmpastfirstinstall2") == "true" then
		assert (loadstring (GetVariable ("hpmVar") or "")) ()
	end
     
     makeRawUrl()
     buildCache()
     
     
end


----------------------------------------------------------------------------------------------------
--							 End Standard Template	    							   --
--							   											        --
--							  Start Main Stuff								        --
----------------------------------------------------------------------------------------------------

function string.explode ( str , seperator , plain )
assert ( type ( seperator ) == "string" and seperator ~= "" , "Invalid seperator (need string of length >= 1)" )
 
local t , nexti = { } , 1
local pos = 1
while true do
local st , sp = str:find ( seperator , pos , plain )
if not st then break end -- No more seperators found
 
if pos ~= st then
t [ nexti ] = str:sub ( pos , st - 1 ) -- Attach chars left of current divider
nexti = nexti + 1
end
pos = sp + 1 -- Jump past current divider
end
t [ nexti ] = str:sub ( pos ) -- Attach chars right of last divider
return t
end

function onSendActionComplete(success,data)
     if success then
          ghName = data
     else
          return
     end
end

function pmMain(l, m, wc)
     local first, rest = wc[1]:match("(%w+)%s*(.*)")
     
     if first == nil then
          HadarHelp()
          return
     end
     
     if first == "check" then
          pmList()
     elseif first == "update" then
          updatePluginThis()
     elseif first == "help" then
          HadarHelp()
     elseif first == "beta" then
          hpmBeta()
     end
     
end

function pmList()
     makeRawUrl()
     buildCache()
     
     build_Len = tablelength(rawPluginUrl)
     build_res = 0
     
          hadarprint("@x086+---------------------@g[@x051L@cist of @x051m@caintained @x051p@clugins@g]@x086---------------------+@w")
          
          for a,b in pairs (rawPluginUrl) do
               if b ~= "" then
                    async_ok, async = pcall (require, "async")
                    ghName = async.doAsyncRemoteRequest(b, buildOutput, "HTTPS") 
               end
          end

          
end

function hpmBeta()
     makeRawUrlBeta()
     buildCacheBeta()
     
     build_Len_beta = tablelength(rawPluginUrlBeta)
     build_res_beta = 0
     
          hadarprint("@x086+---------------------@g[@x051L@cist of @RBETA@w @x051m@caintained @x051p@clugins@g]@x086---------------------+@w")
          
          if build_Len_beta == 0 then
               hadarprint("Nothing to see here")
               return
          end
          for a,b in pairs (rawPluginUrlBeta) do
               if b ~= "" then
                    async_ok, async = pcall (require, "async")
                    ghName = async.doAsyncRemoteRequest(b, buildOutputBeta, "HTTPS") 
               end
          end

          
end

function buildOutputBeta(retval, page, status, headers, full_status, request_url)
     local pid, ghName
     
     if status == 200 then
          ghName = getName(page,true)
          pid = string.match(page, '%s+id="(%w+)"')
     else
          print(request_url)
          hadarprint("Cant connect to github","error")
          return
     end --end if status 200
     
     build_res_beta = build_res_beta + 1
     
     if build_res_beta >= build_Len_beta then
                    ColourTell("Cyan", "", "  ", "teal", "","[","Red","", build_res_beta ,"teal","", "] ", "SkyBlue", "", ghName .. " ")
                    if IsPluginInstalled(hpmVar["betaCache"][pid]["pid"]) then
                         if tonumber(hpmVar["betaCache"][pid]["versionL"]) < tonumber(hpmVar["betaCache"][pid]["versionW"]) then
                              Hyperlink("#updatePlugin "..pid, "[Update Plugin]", "Download and Update Plugin", "DarkOrange", "black", 0, 1)
                         else
                              Hyperlink("#reloadPlugin "..pid, "[reload Plugin]", "Reload plugin", "Teal", "black", 0, 1)
                         end
                         Hyperlink("#removePlugin "..pid, " [Remove Plugin]", "Reload plugin", "Red", "black", 0, 1)
                    
                         if tonumber(hpmVar["betaCache"][pid]["versionL"]) >= tonumber(hpmVar["betaCache"][pid]["versionW"]) then
                              ColourTell("Gold",""," **","Green","","UP TO DATE","Gold","","**")
                         else
                              ColourTell("Red",""," **","Cyan","","from "..hpmVar["betaCache"][pid]["versionL"].." to " .. hpmVar["betaCache"][pid]["versionW"],"Red","","**")
                         end
                    else
                         Hyperlink("#installPlugin "..pid, "[Install Plugin]", "Install Plugin", "DarkOrange", "black", 0, 1)
                         ColourTell("Red",""," [[","Cyan","","Version "..hpmVar["betaCache"][pid]["versionW"],"Red","","]]")
                    end
                    print()
          hadarprint("@x086+----------------------------------------------------------------------+@w")
     else
                    ColourTell("Cyan", "", "  ", "teal", "","[","Red","", build_res_beta ,"teal","", "] ", "SkyBlue", "", ghName .. " ")
                    if IsPluginInstalled(hpmVar["betaCache"][pid]["pid"]) then
                         if tonumber(hpmVar["betaCache"][pid]["versionL"]) < tonumber(hpmVar["betaCache"][pid]["versionW"]) then
                              Hyperlink("#updatePlugin "..pid, "[Update Plugin]", "Download and Update Plugin", "DarkOrange", "black", 0, 1)
                         else
                              Hyperlink("#reloadPlugin "..pid, "[reload Plugin]", "Reload plugin", "Teal", "black", 0, 1)
                         end
                         Hyperlink("#removePlugin "..pid, " [Remove Plugin]", "Reload plugin", "Red", "black", 0, 1)
                    
                         if tonumber(hpmVar["betaCache"][pid]["versionL"]) >= tonumber(hpmVar["betaCache"][pid]["versionW"]) then
                              ColourTell("Gold",""," **","Green","","UP TO DATE","Gold","","**")
                         else
                              ColourTell("Red",""," **","Cyan","","from "..hpmVar["betaCache"][pid]["versionL"].." to " .. hpmVar["betaCache"][pid]["versionW"],"Red","","**")
                         end
                    else
                         Hyperlink("#installPlugin "..pid, "[Install Plugin]", "Install Plugin", "DarkOrange", "black", 0, 1)
                         ColourTell("Red",""," [[","Cyan","","Version "..hpmVar["betaCache"][pid]["versionW"],"Red","","]]")
                    end
     end -- end counting if
     print()
end

function buildOutput(retval, page, status, headers, full_status, request_url)
     local pid, ghName
     
     if status == 200 then
          ghName = getName(page,true)
          pid = string.match(page, '%s+id="(%w+)"')
     else
          print(request_url)
          hadarprint("Cant connect to github","error")
          return
     end --end if status 200
     
     build_res = build_res + 1
     
     if build_res >= build_Len then
                    ColourTell("Cyan", "", "  ", "teal", "","[","Red","", build_res ,"teal","", "] ", "SkyBlue", "", ghName .. " ")
                    if IsPluginInstalled(hpmVar["cache"][pid]["pid"]) then
                         if tonumber(hpmVar["cache"][pid]["versionL"]) < tonumber(hpmVar["cache"][pid]["versionW"]) then
                              Hyperlink("#updatePlugin "..pid, "[Update Plugin]", "Download and Update Plugin", "DarkOrange", "black", 0, 1)
                         else
                              Hyperlink("#reloadPlugin "..pid, "[reload Plugin]", "Reload plugin", "Teal", "black", 0, 1)
                         end
                         Hyperlink("#removePlugin "..pid, " [Remove Plugin]", "Reload plugin", "Red", "black", 0, 1)
                    
                         if tonumber(hpmVar["cache"][pid]["versionL"]) >= tonumber(hpmVar["cache"][pid]["versionW"]) then
                              ColourTell("Gold",""," **","Green","","UP TO DATE","Gold","","**")
                         else
                              ColourTell("Red",""," **","Cyan","","from "..hpmVar["cache"][pid]["versionL"].." to " .. hpmVar["cache"][pid]["versionW"],"Red","","**")
                         end
                    else
                         Hyperlink("#installPlugin "..pid, "[Install Plugin]", "Install Plugin", "DarkOrange", "black", 0, 1)
                         ColourTell("Red",""," [[","Cyan","","Version "..hpmVar["cache"][pid]["versionW"],"Red","","]]")
                    end
                    print()
          hadarprint("@x086+----------------------------------------------------------------------+@w")
     else
                    ColourTell("Cyan", "", "  ", "teal", "","[","Red","", build_res ,"teal","", "] ", "SkyBlue", "", ghName .. " ")
                    if IsPluginInstalled(hpmVar["cache"][pid]["pid"]) then
                         if tonumber(hpmVar["cache"][pid]["versionL"]) < tonumber(hpmVar["cache"][pid]["versionW"]) then
                              Hyperlink("#updatePlugin "..pid, "[Update Plugin]", "Download and Update Plugin", "DarkOrange", "black", 0, 1)
                         else
                              Hyperlink("#reloadPlugin "..pid, "[reload Plugin]", "Reload plugin", "Teal", "black", 0, 1)
                         end
                         Hyperlink("#removePlugin "..pid, " [Remove Plugin]", "Reload plugin", "Red", "black", 0, 1)
                    
                         if tonumber(hpmVar["cache"][pid]["versionL"]) >= tonumber(hpmVar["cache"][pid]["versionW"]) then
                              ColourTell("Gold",""," **","Green","","UP TO DATE","Gold","","**")
                         else
                              ColourTell("Red",""," **","Cyan","","from "..hpmVar["cache"][pid]["versionL"].." to " .. hpmVar["cache"][pid]["versionW"],"Red","","**")
                         end
                    else
                         Hyperlink("#installPlugin "..pid, "[Install Plugin]", "Install Plugin", "DarkOrange", "black", 0, 1)
                         ColourTell("Red",""," [[","Cyan","","Version "..hpmVar["cache"][pid]["versionW"],"Red","","]]")
                    end
     end -- end counting if
     print()
end


function getName(Data,p)
     local name
     if p then
          name = string.upper(string.gsub(string.match(Data, '%s+name="Hadars?_([%w_]+)"'),"_"," "))
     else
          name = string.match(Data, '%s+name="Hadars?_([%w_]+)"')
     end
        return name
end

function updatePlugin(name,line,wc)
     local script_id = wc[1]
     local script_name = hpmVar["cache"][script_id]["lname"]
     local script_url = hpmVar["cache"][script_id]["url"]
     local script_pid = hpmVar["cache"][script_id]["pid"]
     
     
     hadarprint("Updating Plugin @G"..hpmVar["cache"][script_id]["sname"].."@w","script")
    
     UnloadPlugin(script_pid)
     
     async_ok, async = pcall (require, "async")
     if async_ok then
          script_rawurl = async.request(script_url, "HTTPS")
          retval, page, status, headers, full_status = script_rawurl:join()
          
          if status == 200 then
               local lscript = io.open(script_name,"w")
               lscript:write(page)
               lscript:close()
          end --end status 200
     end --end async_ok
     hadarprint("Plugin @G"..hpmVar["cache"][script_id]["sname"].."@c Updated Enjoy!","script")
     LoadPlugin(script_name)
end

function installPlugin(name,line,wc)
     local script_id = wc[1]
     local script_directory = GetInfo(60)
     local script_lname = hpmVar["cache"][script_id]["sname"]
     local script_name = script_directory .. hpmVar["cache"][script_id]["rawname"]..".xml"
     local script_url = hpmVar["cache"][script_id]["url"]
     local script_pid = hpmVar["cache"][script_id]["pid"]
     
      hadarprint("Installing Plugin @G"..script_lname.."@w","script")
      
     async_ok, async = pcall (require, "async")
     if async_ok then
          script_rawurl = async.request(script_url, "HTTPS")
          retval, page, status, headers, full_status = script_rawurl:join()
          
          if status == 200 then
               local lscript = io.open(script_name,"w")
               lscript:write(page)
               lscript:close()
          else --end status 200
               hadarprint("status was not 200","error")
          end
     end --end async_ok
     hadarprint("Plugin @G"..script_lname.."@c Installed Enjoy!","script")
     LoadPlugin(script_name)
end

function reloadPlugin(name,line,wc)
     local script_id = wc[1]
     local script_name = hpmVar["cache"][script_id]["lname"]
     local script_url = hpmVar["cache"][script_id]["url"]
     local script_pid = hpmVar["cache"][script_id]["pid"]
     
     hadarprint("Currently reloading script: @G"..hpmVar["cache"][script_id]["sname"].."@c please stand by","script")
     ReloadPlugin(script_pid)
end

function removePlugin(name,line,wc)
     local script_id = wc[1]
     local script_name = hpmVar["cache"][script_id]["lname"]
     local script_url = hpmVar["cache"][script_id]["url"]
     local script_pid = hpmVar["cache"][script_id]["pid"]
     
     hadarprint("Currently Removing script: "..hpmVar["cache"][script_id]["sname"].." please stand by")
     UnloadPlugin(script_pid)
     local ok, err = os.remove(script_name)
     if ok then
          hadarprint("Removed script:@G"..hpmVar["cache"][script_id]["sname"].."@w","script")
     else
          hadarprint("Was not able to remove @G"..hpmVar["cache"][script_id]["sname"].." @R"..err.."@w","error")
     end
end

function makeRawUrl()
     async_ok, async = pcall (require, "async")
     if async_ok then
          makeRawURL = async.request(gitHubRaw, "HTTPS")
          retval, page, status, headers, full_status = makeRawURL:join()
          
          if status == 200 then
               rawPluginUrl = string.explode(page,"\n")
          end--end 200
     end --end async_ok
     return rawPluginUrl
end

function makeRawUrlBeta()
     async_ok, async = pcall (require, "async")
     if async_ok then
          makeRawURLBeta = async.request(gitHubBeta, "HTTPS")
          retval, page, status, headers, full_status = makeRawURLBeta:join()
          
          if status == 200 then
               rawPluginUrlBeta = string.explode(page,"\n")
          end--end 200
     end --end async_ok
     return rawPluginUrlBeta
end

function raw_get(retval, page, status, headers, full_status, request_url)
     if status == 200 then
          print(page)
     end
end

function tablelength(T)
  local count = 0
  for i,v in pairs(T) do 
     if v ~= "" then
          count = count + 1
     end
  end
  return count
end

function buildCache()
     cache_Len = tablelength(rawPluginUrl)
     cache_res = 0
     
     async_ok, async = pcall (require, "async")
     if async_ok then
     
     if rawPluginUrl == nil then
          hadarprint("Please make sure the URL is properly filled out","error")
          return
     end
          
     for a,b in pairs (rawPluginUrl) do
          if b ~= "" then
               plugin_page = async.doAsyncRemoteRequest(b, raw_get_cache, "HTTPS") 
          end
     end -- end for loop
     
	else
		hadarprint("something went wrong with async in building cache","error")
	end --end if async_ok
     
end --end function buildCache()

function buildCacheBeta()
     beta_cache_Len = tablelength(rawPluginUrlBeta)
     beta_cache_res = 0
     
     async_ok, async = pcall (require, "async")
     if async_ok then
     
     if rawPluginUrlBeta == nil then
          hadarprint("Please make sure the URL is properly filled out","error")
          return
     end
          
     for a,b in pairs (rawPluginUrlBeta) do
          if b ~= "" then
               beta_plugin_page = async.doAsyncRemoteRequest(b, raw_get_cache_Beta, "HTTPS") 
          end
     end -- end for loop
     
	else
		hadarprint("something went wrong with async in building cache","error")
	end --end if async_ok
     
end --end function buildCache()


function raw_get_cache(retval, page, status, headers, full_status, request_url)
     
     local WName, rawname, ghVersion, pid, lVersion, lname 
     
     if status == 200 then
          WName = getName(page,false)
          rawname = string.match(page, '%s+name="([a-zA-Z0-9_]+)"')
          ghVersion = string.match(page, '%s%s+version="(%d+%.?%d+)"')
          pid = string.match(page, '%s+id="(%w+)"')
          lVersion = GetPluginInfo(pid,19)
          lname = GetPluginInfo(pid,6)
          hpmVar["cache"][pid] = {}
     else
          hadarprint("Cant connect to github","error")
     end --end if status 200
     
     cache_res = cache_res + 1

     if cache_res >= cache_Len then
          hpmVar["cache"][pid]["sname"] = WName
          hpmVar["cache"][pid]["rawname"] = rawname
          hpmVar["cache"][pid]["versionW"] = ghVersion
          hpmVar["cache"][pid]["pid"] = pid
          hpmVar["cache"][pid]["versionL"] = lVersion
          hpmVar["cache"][pid]["lname"] = lname
          hpmVar["cache"][pid]["url"] = request_url
     else
          hpmVar["cache"][pid]["sname"] = WName
          hpmVar["cache"][pid]["rawname"] = rawname
          hpmVar["cache"][pid]["versionW"] = ghVersion
          hpmVar["cache"][pid]["pid"] = pid
          hpmVar["cache"][pid]["versionL"] = lVersion
          hpmVar["cache"][pid]["lname"] = lname
          hpmVar["cache"][pid]["url"] = request_url
     end -- end counting if
     
     
end--end raw_get

function raw_get_cache_Beta(retval, page, status, headers, full_status, request_url)
     
     local WName, rawname, ghVersion, pid, lVersion, lname 
     
     if status == 200 then
          WName = getName(page,false)
          rawname = string.match(page, '%s+name="([a-zA-Z0-9_]+)"')
          ghVersion = string.match(page, '%s%s+version="(%d+%.?%d+)"')
          pid = string.match(page, '%s+id="(%w+)"')
          lVersion = GetPluginInfo(pid,19)
          lname = GetPluginInfo(pid,6)
          hpmVar["betaCache"][pid] = {}
     else
          hadarprint("Cant connect to github","error")
     end --end if status 200
	
	--tprint(hpmVar)
     
     beta_cache_res = beta_cache_res + 1

     if beta_cache_res >= beta_cache_Len then
          hpmVar["betaCache"][pid]["sname"] = WName
          hpmVar["betaCache"][pid]["rawname"] = rawname
          hpmVar["betaCache"][pid]["versionW"] = ghVersion
          hpmVar["betaCache"][pid]["pid"] = pid
          hpmVar["betaCache"][pid]["versionL"] = lVersion
          hpmVar["betaCache"][pid]["lname"] = lname
          hpmVar["betaCache"][pid]["url"] = request_url
     else
          hpmVar["betaCache"][pid]["sname"] = WName
          hpmVar["betaCache"][pid]["rawname"] = rawname
          hpmVar["betaCache"][pid]["versionW"] = ghVersion
          hpmVar["betaCache"][pid]["pid"] = pid
          hpmVar["betaCache"][pid]["versionL"] = lVersion
          hpmVar["betaCache"][pid]["lname"] = lname
          hpmVar["betaCache"][pid]["url"] = request_url
     end -- end counting if
     
     
end--end raw_get

--[[
Self updating code below taken from crowley because im too lazy to write my own
check him out on github
https://github.com/AardCrowley/Aardwolf-Scripts
]]

function updatePluginThis()
     raw = "https://raw.githubusercontent.com/zzyzzyzzx/Hadar/master/PluginManager/Hadar_Plugin_Manager.xml"
     async_ok, async = pcall (require, "async")
     if async_ok then
          plugin_page = async.doAsyncRemoteRequest(raw, Raw_Update, "HTTPS")
     else
          hadarprint("Error on updating","error")
     end
end

function Raw_Update(retval, page, status, headers, full_status, request_url)
        if status == 200 then
            raw_version = tonumber(string.match(page, '%s%s+version="(%d+%.?%d+)"'))
        end

        if tonumber(raw_version) == tonumber(PLUGIN_VERSION) then
            hadarprint("@G"..PLUGIN_NAME .. "@c is up to date!","script")
        elseif tonumber(raw_version) > tonumber(PLUGIN_VERSION) then
            hadarprint("Updating from version @R"..PLUGIN_VERSION.."@c to @R"..raw_version.."@c Please stand by.","script")
            local file = io.open(GetPluginInfo(GetPluginID(), 6), "w")
            file:write(page)
            file:close()
            if "" == GetAlphaOption("script_prefix") then
                SetAlphaOption("script_prefix", "\\\\\\")
            end
            Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
            hadarprint("Updating is complete, Have a muddish day!","script")
        elseif tonumber(raw_version) < tonumber(PLUGIN_VERSION) then
          hadarprint("Your development is too quick!","error")
        end
        raw_version = nil
    end -- end Update code

function HadarHelp()
hadarprint("@x086+-----------------------@g[@CP@clugin @CM@canager @WV:"..GetPluginInfo (GetPluginID (), 19).."@g]@x086------------------------+")
hadarprint("@x086| @x214hpm help                @x110- @x214Displays this helpfile @x086                    |")
hadarprint("@x086| @x208hpm check               @x110- @x208Checks to see if there is any updates @x086     |")
hadarprint("@x086| @x214hpm update              @x110- @x214Checks for updates on this script@x086          |")
hadarprint("@x086|                          @WONLY PLUGIN THAT WILL ASK                   @x086|")
hadarprint("@x086|  @x208https://www.paypal.com/donate?hosted_button_id=Q93B59ZGWHETA        @x086|")
hadarprint("@x086+----------------------------------------------------------------------+")
end

]]>
</script> 

</muclient>