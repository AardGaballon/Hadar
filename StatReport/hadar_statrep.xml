<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, September 20, 2016, 2:53 PM -->
<!-- MuClient version 5.01 -->

<muclient>
<plugin
   name="Hadar_StatRep"
   author="Hadar"
   id="c3b387aef811333eb5ce307b"
   language="Lua"
   purpose="report stats/stats from max"
   save_state="y"
   date_written="2018-08-22 00:00:00"
   requires="4.00"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Can see all my help files with had help or just this one with killer help
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->
<triggers>
  <trigger
   match="^(\d+),(.*),(\d+),(\d+),(\d+),([+-]?[0-9,]+),(\d+)$"
   name="upattack"
   regexp="y"
   send_to="12"
   script=""
   sequence="100"
  >
  </trigger>
</triggers>


<!--  Plugin help  -->

<aliases>
<alias
   match="^repstat ?(.*)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="statRep_build"
  >
  </alias>
  
  <alias
   match="^statrep ?(\w+)? ?(.*)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="statRep_Output"
  >
  </alias>
  
  <alias match="^(?:had) help$"
	enabled="y"
	sequence="99"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
</aliases>

<script>
<![CDATA[
require "serialize"

dofile(GetInfo(60) .. "aardwolf_colors.lua")

function interp(s, tab)
	if s == nil then
		hadarerror("@RYou forgot to fill in a message please use @Clevel help@R and run the message commands to see which one.")
	else
		return (s:gsub('($%b{})', function(w) return tab[w:sub(3, -2)] or w end))
	end
end

function hadarerror(str)
	AnsiNote(stylesToANSI(ColoursToStyles(str)))
end

function gmcp(what) --pulled from gmcp helper, lets see if fixes older version
	result, value = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", what)
	if result ~= 0 then
		ColourNote ("orange", "", "Warning: Could not get GMCP value for " .. what)
		return nil
	else
		local luastmt = "ret = " .. value
		assert (loadstring (luastmt or "")) ()
		return ret
	end -- if
end -- gmcp

function OnPluginBroadcast(msg, id, name, text)

	if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
		if (text == "char.status") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
		
			assert(loadstring("LoadInfo = "..gmcparg or "")) ()
			currentState = tonumber(gmcp("char.status.state"))
		
			for i,v in pairs(LoadInfo) do
				if i == "status" then
					for k,j in pairs(v) do
						if k == "level" then
							hlvl = j
						end
					end
				end
				if i == "base" then
					for k,j in pairs(v) do
						if k == "tier" then
							htier = j
						end
					end
				end
				if i == "stats" then
					for k,j in pairs(v) do
						if k == "str" then
							hstr = tonumber(j)
						elseif k == "int" then
							hint = tonumber(j)
						elseif k == "wis" then
							hwis = tonumber(j)
						elseif k == "con" then
							hcon = tonumber(j)
						elseif k == "dex" then
							hdex = tonumber(j)
						elseif k == "luck" then
							hluck = tonumber(j)
						elseif k == "hr" then
							hhr = tonumber(j)
						elseif k == "dr" then
							hdr = tonumber(j)
						end
					end
				end
				if i == "maxstats" then
					for k,j in pairs(v) do
						if k == "maxstr" then
							hmaxstr = tonumber(j)
						elseif k == "maxint" then
							hmaxint = tonumber(j)
						elseif k == "maxwis" then
							hmaxwis = tonumber(j)
						elseif k == "maxcon" then
							hmaxcon = tonumber(j)
						elseif k == "maxdex" then
							hmaxdex = tonumber(j)
						elseif k == "maxluck" then
							hmaxluck = tonumber(j)
						elseif k == "maxhp" then
							hmaxhp = tonumber(j)
						elseif k == "maxmana" then
							hmaxmana = tonumber(j)
						elseif k == "maxmoves" then
							hmaxmoves = tonumber(j)
						end
					end
				end
			end -- end for
		end --end if char status
	end
end

function OnPluginSaveState ()
	SetVariable ("hstatrep", "hstatrep = " .. serialize.save_simple (hstatrep))
	SetVariable ("statpastfirstinstall", "true")
end -- function OnPluginSaveState


function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
	
	print("had help (to see all of hadar's plugin helpfiles), or stats help to just see this one")
  
	OnPluginEnable ()
end

function OnPluginEnable ()

	hstatrep = {}
	
	SendNoEcho("protocols gmcp sendstatus")
	SendNoEcho("protocols gmcp sendbase")
	SendNoEcho("protocols gmcp sendstats")
	SendNoEcho("protocols gmcp sendmax")
	
	if GetVariable ("statpastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("hstatrep") or "")) ()
	else
		buildInitial()
	end

end

function buildInitial()
	hstatrep.Channel = "echo"
	hstatrep.output = "@g\\}@WStr@w: @R${str}@w/@r${maxstr}@g{/ @g\\}@WDex@w: @R${dex}@W/@r${maxdex}@g{/ @g\\}@WCon@w: @R${con}@W/@r${maxcon}@W@g{/ @g\\}@WInt@w: @R${int}@W/@r${maxint}@W@g{/ @g\\}@WWis@w: @R${wis}@W/@r${maxwis}@W@g{/ @g\\}@WLuck@w: @R${luck}@W/@r${maxluck}@W@g{/ @WHR@w: @R${hr}@W @WDR@w: @R${dr}@W @WHP@w: @R${hp}@W @WMana@w: @R${mana}@W @g\\}@WTotals@w: @R${total}@w/@R${maxtotal}@g{/@w"
end
											 
----------------------------------------------------------------------------------------------------
--										      End GMCP											  --
--																								  --
--								         Start function Stuff									  --
----------------------------------------------------------------------------------------------------

function statRep_build(name,line,wildcards)
	local repChannel
	
	if wildcards[1] ~= "" then
		hstatrep.Channel = wildcards[1]
	end
	
	local msg = interp(hstatrep.output,{
		  str = hstr
		, maxstr = hmaxstr
		, int = hint
		, maxint = hmaxint
		, wis = hwis
		, maxwis = hmaxwis
		, dex = hdex
		, maxdex = hmaxdex
		, con = hcon
		, maxcon = hmaxcon
		, luck = hluck
		, maxluck = hmaxluck
		, hr = hhr
		, dr = hdr
		, hp = hmaxhp
		, mana = hmaxmana
		, moves = hmaxmoves
		, total = (hdex + hstr + hwis + hcon + hint + hluck)
		, maxtotal = (hmaxdex + hmaxstr + hmaxwis + hmaxcon + hmaxint + hmaxluck)

	})
	
	SendNoEcho(hstatrep.Channel .. " " ..msg)
	
end

function statRep_Output(name,line,wildcards)
	local one = string.lower(wildcards[1])
	local two = string.lower(wildcards[2]) or nil

	if one == nil or one == "" or one == " " then
		hadarerror("statrep needs an output, please check out statrep help (or use command repstat <channel>)")
	end
	
	if one == "help" then
		HadarHelp()
	elseif one == "output" then
		changeOutput()
	elseif one == "channel" then
		setchannel(two)
	end
	
end

function changeOutput()
	local HadarBackup = hstatrep.output
		local s = [[
		Can accept upto the following variables
		${str} - Strength stat / ${maxstr} - maximum Strength
		${int} - Intelligence Stat / ${maxint} - maximum Intelligence
		${wis} - Wisdom Stat / ${maxwis} - maximum Wisdom
		${dex} - Dexterity Stat / ${maxdex} - maximum Dexterity
		${con} - Constitution Stat / ${maxcon} - maximum Constitution
		${luck} - Luck Stat / ${maxluck} - maximum Luck
		${hp} - maximum health
		${mana} - maximum mana
		${moves} - maximum moves
		${hr} - your hit roll / ${dr} - your damage roll
		${total} - total of all stats combined
		${maxtotal} - total of all maxstats combined
		]]
		hstatrep.output = utils.inputbox (s,"Look of stat reporter", hstatrep.output, "Courier", 9)
	if hstatrep.output ~= nil then
		hadarerror("@gstatrep output@W:@w" .. hstatrep.output)
	else
		hstatrep.output = HadarBackup
	end
	SaveState()
end

function setchannel(str)
	if str ~= nil and str ~= "" and str ~= " " then
		hstatrep.Channel = str
		hadarerror("@RStat Rep @Cdefault channel set to: @G" .. hstatrep.Channel)
	else
		hadarerror("@RERROR: @wto set default channel please use @Cstatrep channel <channel>@w")
	end
end

----------------------------------------------------------------------------------------------------
--									     End function stuff 	   							      --
--																								  --
--									    Begin LuaFile Stuff										  --
----------------------------------------------------------------------------------------------------

function calcMaxStats (level, tier)
        local level = tonumber(level)
        local tier = tonumber(tier)
        local maxpossible = nil
        if (level <= 70 ) then
                maxpossible = (level + 25) + (tier * 2)
        elseif ((level > 70) and (level <= 155)) then
                maxpossible = 95 + ((level - 70) * 2) + (tier * 2)
        elseif ((level > 155) and (level <= 200)) then
                maxpossible = 265 + ((level - 155) * 3) + (tier * 2)
        elseif (level == 201) then
                maxpossible = 395
        end
        return maxpossible  
end -- calcMaxStats
 
function calcMaxCost (maxpossible, current)
        local maxcost = 0
        local currentcount = tonumber(current)
        local possible = tonumber(maxpossible)
        local cost = 0
        if (possible == currentcount) then
                return maxcost
        end
        while (currentcount < possible) do
                if ((currentcount <= 70 ) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 1
                end
                if ((currentcount >= 71) and (currentcount <= 90)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 2
                end
                if ((currentcount >= 91) and (currentcount <= 130) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 3
                end
                if ((currentcount >= 131) and (currentcount <= 170) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 4
                end
                if ((currentcount >= 171) and (currentcount <= 200) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 6
                end
                if ((currentcount >= 201) and (currentcount <= 224) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 9
                end
                if ((currentcount >= 225) and (currentcount <= 250) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 11
                end
                if ((currentcount >= 251) and (currentcount <= 275) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 15
                end
                if ((currentcount >= 276) and (currentcount <= 290) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 17
                end
                if ((currentcount >= 291) and (currentcount <= 300) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 20
                end
                if ((currentcount >= 301) and (currentcount <= 325) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 25
                end
                if ((currentcount >= 326) and (currentcount <= 350) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 35
                end
                if ((currentcount >= 351) and (currentcount <= 375) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 50
                end
                if ((currentcount >= 376) and (currentcount <= 400) and (currentcount <= possible)) then
                        currentcount = currentcount + 1
                        maxcost = maxcost + 60
                end
        end
        return maxcost  
end -- calcMaxCost
 
 
function maxVital (maxpossible, current)
        local maxcost = 0
        local currentcount = tonumber(current)
        local possible = tonumber(maxpossible)
        local cost = 0
        if (possible == currentcount) then
                return maxcost
        end
        while (currentcount < possible) do
                if ((currentcount <= 10000 ) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 2
                end
                if ((currentcount >= 10001) and (currentcount <= 14000)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 3
                end
                if ((currentcount >= 14001) and (currentcount <= 18000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 4
                end
                if ((currentcount >= 18001) and (currentcount <= 22000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 5
                end
                if ((currentcount >= 22001) and (currentcount <= 26000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 6
                end
                if ((currentcount >= 26001) and (currentcount <= 30000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 7
                end
                if ((currentcount >= 30001) and (currentcount <= 40000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 10
                end
                if ((currentcount >= 40001) and (currentcount <= 50000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 15
                end
                if ((currentcount >= 50001) and (currentcount <= 75000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 20
                end
                if ((currentcount >= 75001) and (currentcount <= 80000) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 25
                end
                if ((currentcount >= 80001) and (currentcount <= 99999) and (currentcount <= possible)) then
                        currentcount = currentcount + 10
                        maxcost = maxcost + 30
                end
        end
        return maxcost  
end -- maxVital


----------------------------------------------------------------------------------------------------
--									    End luafile stuff 	   							          --
--																								  --
--									    Begin help Stuff										  --
----------------------------------------------------------------------------------------------------


function HadarHelp()
	ColourNote("#159FE5","","+---------------------------------------","Green","","[","Cyan","","S","Teal","","tat rep","Green","","]","#159FE5","","---------------------------------------+")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," statrep <channel>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," If blank will send to echo else sends to a channel"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," statrep output"),"#159FE5","","-","#F1D566","",string.format("%-64s"," changes the output of the message"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-19s"," statrep channel <channel>"),"#159FE5","","-","#F1D566","",string.format("%-64s"," changes default channel default:echo"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%84s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," if any issues arise, please contact Hadar via a personal note! or on discord zzyzzyzzx#0001"),"#159FE5","","|")
	ColourNote("#159FE5","","+"..string.rep("-",84).."+")
end


]]>
</script> 

</muclient>