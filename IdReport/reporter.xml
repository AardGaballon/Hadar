<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Hadars_identify"
   author="Hadar"
   id="a92c40f4114e1d08f4c121ed"
   language="Lua"
   purpose="identify script that will at some point update hadar.ninja"
   save_state="y"
   date_written="2020-01-01 00:00:00"
   requires="4.00"
   version="0.00"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers

<trigger
   enabled="y"
   match=""
   omit_from_output="y"
   regexp="y"
   group=""
   script=""
   sequence="100"
  >
</trigger>

  -->

<triggers>

<trigger
   enabled="n"
   match="^\+-*\+$"
   omit_from_output="y"
   regexp="y"
   group="idCap"
   sequence="100"
  >
</trigger>

<trigger
   enabled="y"
   match="^Auction: \w+ is auctioning .* \(Level \d+, Num (\d+)\)\. Current bid is [0-9,]+\.$"
   omit_from_output="n"
   regexp="y"
   script="autoidenta"
   sequence="100"
  >
</trigger>

<trigger
   enabled="y"
   match="^Current bid on this item is \d+ gold \(No bid yet\)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
</trigger>

<trigger
   enabled="n"
   match="^\|(.*)\|"
   omit_from_output="y"
   regexp="y"
   group="idCap"
   script="infoCap"
   sequence="100"
   keep_evaluating="y"
  >
</trigger>

<trigger
   enabled="y"
   match="^Remort Auction: \w+ is selling .* \(Num (\d+)\)\.$"
   omit_from_output="n"
   regexp="y"
   script="autoidentr"
   sequence="100"
  >
</trigger>

</triggers>

<!-- Alias
<alias
   script=""
   match=""
   enabled="y"
   regexp="y"
   group=""
   sequence="100"
  >
  </alias>
  
  <aliases>
</aliases>
 -->
 <aliases>
  <alias
   match="^idshow\s?(\d+|all)\s?(.*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   send_to="12"
   script="showid"
  >
  </alias>
  
    <alias match="^(?:had|hid) help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
	
	<alias
	match="^idchannel\s?(\w+)?$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="setreportchannel"
	>
	</alias>
	
	<alias
	match="^idauto$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="toggleAutoID"
	>
	</alias>
	
	<alias
	match="^idwords$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="setreportwords"
	>
	</alias>
	
	<alias
	match="^idbeeps$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="toggleannoying"
	>
	</alias>
	
	<alias
	match="^idset$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="setOutput"
	>
	</alias>
	
	<alias
	match="^idmax\s?(\d+)?$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="idmax"
	>
	</alias>
	
	<alias
	match="^idsethelp$"
	enabled="y"
	regexp="y"
	sequence="100"
	script="hadarhelptwo"
	>
	</alias>
	
	<alias match="^id\s(.*)"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		EnableTriggerGroup("idCap", true)
		SendSpecial("identify %1")
	</send>
	</alias>
</aliases>



<script>
<![CDATA[
require "serialize"
require "tprint"

dofile(GetInfo(60) .. "aardwolf_colors.lua")


function OnPluginSaveState ()
	SetVariable ("idreport", "idreport = " .. serialize.save_simple (idreport))
	SetVariable ("pastfirstinstall", "true")
end -- function OnPluginSaveState

function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
	
	print("had help (to see all of hadar's plugin helpfiles), or hid help to just see this one")
  
	OnPluginEnable ()
end

function OnPluginEnable ()

	report = {}
	idreport = {}
		
	if GetVariable ("pastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("idreport") or "")) ()
	else
		buildInitial()
	end

end

function buildInitial()

	idreport.output = "${name} Lvl: ${lvl} ${avgDmg:|avedam} ${wearable|:wearloc}${Leads To:|leadsto} (${Weight:|weight}) [${Capacity:|capacity}${ TotWeight:|totweight}${ WeightReduction:|weightred}${Hr:|hr}${ Dr:|dr}${ Inflicts:|inflicts}${ Specials:|specials}${use:|spelluse}${ name:|spellname}${ level:|spelllevel}${TotStats:|totalstat}${ Int:|int}${ Wis:|wis}${ Dex:|dex}${ Con:|con}${ Luck:|luck}${ points:|score}] (${enchantsolid}${enchantreso}${enchantillum})"
	
	idreport.maxid = 20
	idreport.currentid = 1
	idreport.annoying = "no"
	idreport.channel = "echo"
	idreport.autoid = "yes"
	idreport.bidnum = 0
	idreport.rbidnum = 0
	
end

function split (input)
		sep = "|"
        local t={}
        for str in string.gmatch(input, "([^"..sep.."]+)") do
                table.insert(t, str)
        end
        return t
end


function interp(s, tab)

local stringone = nil
local stringtwo = nil
local workingon = 0

		return (s:gsub('($%b{})',
			function(w)
				if w:find("|") then
					for i,v in pairs(split(triminterp(w))) do
						if i == 1 and tab[v] ~= nil then
							if v == "score" and tonumber(tab[v]) > 0 then
								stringone = tab[v]
								workingon = 1
							elseif v ~= "score" then
								stringone = tab[v]
								workingon = 1
							end
						elseif i == 2 and stringone ~= nil and workingon == 1 then
							return stringone .. v
						elseif i == 1 and tab[v] == nil then
							stringtwo = v
							workingon = 2
						elseif i == 2 and stringtwo ~= nil and tab[v] ~= nil and workingon == 2 then
							if v == "score" and tonumber(tab[v]) > 0 then
								return stringtwo .. tab[v] or "pigs"
							elseif v ~= "score" then
								return stringtwo .. tab[v] or "monkies"
							end
						else
							--print("could not find I:"..i .." V:" .. v)
						end
					end
				else
					return tab[w:sub(3, -2)] or ""
				end --end of if function inside gsub
				return w:gsub("[%$%{%A+%a+|%}]","")
			end)) -- end of gsub
end --end of interp function

function triminterp(s)
			local string
			string = s:gsub("[%$%{%}]","")
			return(string)
end

function trim(s)
			return s:find'^%s*$' and '' or s:match'^%s*(.*%S)'
end

function infoCap(name, line, wildcards, styles)

	if string.find(wildcards[1],"Name%s+:") then
		local cname = StylesToColoursOneLine(styles)
		
		report.coloredname = trim(string.sub(cname,string.find(cname, ":")+1,string.find(cname, " |")))
	end


--original person to write all this was durel did not want to re-write so borrowed
  local isPartialId, id, name, level, weight, wearable, score, keywords, itemType, worth, flags,
        affectMods, continuation, material, foundAt, ownedBy, clan, rawMaterial

  isPartialId = string.find(line, "A full appraisal will reveal further information on this item")

  _, _, id = string.find(line, "Id%s+:%s+(%d+)%s+")
  _, _, name = string.find(line, "Name%s+:%s+(.-)%s+|")
  _, _, level = string.find(line, "Level%s+:%s+(%d+)%s+")
  _, _, weight = string.find(line, "Weight%s+:%s+([0-9,-]+)%s+")
  _, _, wearable = string.find(line, "Wearable%s+:%s+(.*) %s+")
  _, _, score = string.find(line, "Score%s+:%s([0-9,]+)%s+")
  _, _, keywords = string.find(line, "Keywords%s+:%s+(.-)%s+|")
  _, _, itemType = string.find(line, "| Type%s+:%s+(%a+)%s+")
  _, _, rawMaterial = string.find(line, "| Type%s+:%s+(Raw material:%a+)")

  _, _, worth = string.find(line, "Worth%s+:%s+([0-9,]+)%s+")
  _, _, flags = string.find(line, "Flags%s+:%s+(.-)%s+|")
  _, _, affectMods = string.find(line, "Affect Mods:%s+(.-)%s+|")
  _, _, continuation = string.find(line, "|%s+:%s+(.-)%s+|")
  _, _, material = string.find(line, "Material%s+:%s+(.*)%s+")
  _, _, foundAt = string.find(line, "Found at%s+:%s+(.-)%s+|")
  _, _, ownedBy = string.find(line, "Owned By%s+:%s+(.-)%s+|")
  _, _, clan = string.find(line, "Clan Item%s+:%s+(.-)%s+|")

  -- Potions, pills, wands, and staves
  local spellUses, spellLevel, spellName
  _, _, spellUses, spellLevel, spellName = string.find(line, "([0-9]+) uses? of level ([0-9]+) '(.*)'")

  -- Portal-only fields
  local leadsTo
  _, _, leadsTo = string.find(line, "Leads to%s+:%s+(.*)%s+")

  -- Container-only fields
  local capacity, holding, heaviestItem, itemsInside, totWeight, itemBurden, weightReduction
  _, _, capacity = string.find(line, "Capacity%s+:%s+([0-9,]+)%s+")
  _, _, holding = string.find(line, "Holding%s+:%s+([0-9,]+)%s+")
  _, _, heaviestItem = string.find(line, "Heaviest Item:%s+([0-9,]+)%s+")
  _, _, itemsInside = string.find(line, "Items Inside%s+:%s+([0-9,]+)%s+")
  _, _, totWeight = string.find(line, "Tot Weight%s+:%s+([0-9,-]+)%s+")
  _, _, itemBurden = string.find(line, "Item Burden%s+:%s+([0-9,]+)%s+")
  _, _, weightReduction = string.find(line, "Items inside weigh (%d+). of their usual weight%s+")

  local int, wis, luck, str, dex, con
  _, _, int = string.find(line, "Intelligence%s+:%s+([+-]?%d+)%s+")
  _, _, wis = string.find(line, "Wisdom%s+:%s+([+-]?%d+)%s+")
  _, _, luck = string.find(line, "Luck%s+:%s+([+-]?%d+)%s+")
  _, _, str = string.find(line, "Strength%s+:%s+([+-]?%d+)%s+")
  _, _, dex = string.find(line, "Dexterity%s+:%s+([+-]?%d+)%s+")
  _, _, con = string.find(line, "Constitution%s+:%s+([+-]?%d+)%s+")

  local hp, mana, moves
  _, _, hp = string.find(line, "Hit points%s+:%s+([+-]?%d+)%s+")
  _, _, mana = string.find(line, "Mana%s+:%s+([+-]?%d+)%s+")
  _, _, moves = string.find(line, "Moves%s+:%s+([+-]?%d+)%s+")

  local hit, dam
  _, _, hit = string.find(line, "Hit roll%s+:%s+([+-]?%d+)%s+")
  _, _, dam = string.find(line, "Damage roll%s+:%s+([+-]?%d+)%s+")

  local allphys, allmagic
  _, _, allphys = string.find(line, "All physical%s+:%s+([+-]?%d+)%s+")
  _, _, allmagic = string.find(line, "All magic%s+:%s+([+-]?%d+)%s+")

  local acid, cold, energy, holy, electric, negative, shadow, magic, air, earth, fire, light, mental,
        sonic, water, poison, disease
  _, _, acid = string.find(line, "Acid%s+:%s+([+-]?%d+)%s+")
  _, _, cold = string.find(line, "Cold%s+:%s+([+-]?%d+)%s+")
  _, _, energy = string.find(line, "Energy%s+:%s+([+-]?%d+)%s+")
  _, _, holy = string.find(line, "Holy%s+:%s+([+-]?%d+)%s+")
  _, _, electric = string.find(line, "Electric%s+:%s+([+-]?%d+)%s+")
  _, _, negative = string.find(line, "Negative%s+:%s+([+-]?%d+)%s+")
  _, _, shadow = string.find(line, "Shadow%s+:%s+([+-]?%d+)%s+")
  _, _, magic = string.find(line, "Magic%s+:%s+([+-]?%d+)%s+")
  _, _, air = string.find(line, "Air%s+:%s+([+-]?%d+)%s+")
  _, _, earth = string.find(line, "Earth%s+:%s+([+-]?%d+)%s+")
  _, _, fire = string.find(line, "Fire%s+:%s+([+-]?%d+)%s+")
  _, _, light = string.find(line, "Light%s+:%s+([+-]?%d+)%s+")
  _, _, mental = string.find(line, "Mental%s+:%s+([+-]?%d+)%s+")
  _, _, sonic = string.find(line, "Sonic%s+:%s+([+-]?%d+)%s+")
  _, _, water = string.find(line, "Water%s+:%s+([+-]?%d+)%s+")
  _, _, poison = string.find(line, "Poison%s+:%s+([+-]?%d+)%s+")
  _, _, disease = string.find(line, "Disease%s+:%s+([+-]?%d+)%s+")

  local slash, pierce, bash
  _, _, slash = string.find(line, "Slash%s+:%s+([+-]?%d+)%s+")
  _, _, pierce = string.find(line, "Pierce%s+:%s+([+-]?%d+)%s+")
  _, _, bash = string.find(line, "Bash%s+:%s+([+-]?%d+)%s+")

  local avedam, inflicts, damtype, weaponType, specials
  _, _, avedam = string.find(line, "Average Dam%s+:%s+(%d+)%s+")
  _, _, inflicts = string.find(line, "Inflicts%s+:%s+(%a+)%s+")
  _, _, damtype = string.find(line, "Damage Type%s+:%s+(%a+)%s+")
  _, _, weaponType = string.find(line, "Weapon Type:%s+(%a+)%s+")
  _, _, specials = string.find(line, "Specials%s+:%s+(%a+)%s+")

  local tmpAvedam, tmpHR, tmpDR, tmpInt, tmpWis, tmpLuck, tmpStr, tmpDex, tmpCon
  _, _, tmpAvedam = string.find(line, ":%s+adds [+-](%d+) average damage%s+")
  _, _, tmpHR = string.find(line, ":%s+hit roll [+-](%d+)")
  _, _, tmpDR = string.find(line, ":%s+damage roll [+-](%d+)")
  _, _, tmpInt = string.find(line, ":%s+intelligence [+-](%d+)")
  _, _, tmpWis = string.find(line, ":%s+wisdom [+-](%d+)")
  _, _, tmpLuck = string.find(line, ":%s+luck [+-](%d+)")
  _, _, tmpStr = string.find(line, ":%s+strength [+-](%d+)")
  _, _, tmpDex = string.find(line, ":%s+dexterity [+-](%d+)")
  _, _, tmpCon = string.find(line, ":%s+constitution [+-](%d+)")

  if (id ~= nil) then
    report.Id = id
  end -- if

  if (name ~= nil) then
    report.Name = name
	beannoying(name)
  end -- if

  if (level ~= nil) then
    report.Level = level
  end -- if

  if (weight ~= nil) then
    report.Weight = weight
  end -- if

  if (wearable ~= nil) then
    wearable = Trim(wearable)
    report.Wearable = wearable
  end -- if

  if (score ~= nil) then
    report.Score = score
  end -- if

  if (keywords ~= nil) then
    report.Keywords = keywords
  end -- if

  if (itemType ~= nil) or (rawMaterial ~= nil) then
    if (rawMaterial ~= nil) then
      itemType = string.gsub(rawMaterial, "Raw material", "RawMaterial")
    end -- if

    report.Type = itemType
  end -- if

  if (worth ~= nil) then
    report.Worth = worth
  end -- if

	if (isPartialId ~= nil) then
		report.IdentifyLevel = "LevelPartial"
	end -- if

	if (flags ~= nil) then
		report.Flags = flags
		-- If the flags are continued (they end in a ",") watch for the continuation
		if (string.find(flags, ",$")) then
			flagsContinuation = true
		else
			flagsContinuation = false
			makeEnchantmentstuff()
		end -- if
	end -- if

	if (affectMods ~= nil) then
		report.AffectMods = affectMods
		-- If the affectMods are continued (they end in a ",") watch for the continuation
		if (string.find(affectMods, ",$")) then
			affectModsContinuation = true
		else
			affectModsContinuation = false
		end -- if
	end -- if

	if (continuation ~= nil) then

		if (flagsContinuation) then
			-- Add the continuation to the existing flags
			report.Flags = report.Flags .. " " .. continuation

			-- If the continued flags end in a comma, keep the continuation going; otherwise stop it
			if not (string.find(continuation, ",$")) then
				flagsContinuation = false
				makeEnchantmentstuff()
			end -- if
		elseif (affectModsContinuation) then
		-- Add the continuation to the existing affectMods

			report.AffectMods = report.AffectMods .. " " .. continuation

		-- If the continued affectMods end in a comma, keep the continuation going; otherwise stop it
			if not (string.find(continuation, ",$")) then
				affectModsContinuation = false
			end -- if
		else
      -- Placeholder to add continuation support for other things (notes? others?)
		end -- if
	end -- if

  if (material ~= nil) then
    material = Trim(material)
    report.Material = material
  end -- if

  if (foundAt ~= nil) then
    report.FoundAt = foundAt
  end -- if

  if (ownedBy ~= nil) then
    report.OwnedBy = ownedBy
  end -- if

  if (clan ~= nil) then
    report.Clan = clan
  end -- if

  if (spellUses ~= nil) and (spellLevel ~= nil) and (spellName ~= nil) then
    report.spellsName = spellName
	report.spellsUses = spellUses
	report.spellsLevel = spellLevel
  end -- if

  if (leadsTo ~= nil) then
    leadsTo = Trim(leadsTo)
    report.LeadsTo = leadsTo
  end -- if

  -- Container stats
  if (capacity ~= nil) then
    report.Capacity = capacity
  end -- if

  if (holding ~= nil) then
    report.Holding = holding
  end -- if

  if (heaviestItem ~= nil) then
    report.HeaviestItem = heaviestItem
  end -- if

  if (itemsInside ~= nil) then
    report.ItemsInside = itemsInside
  end -- if

  if (totWeight ~= nil) then
    report.TotWeight = totWeight
  end -- if

  if (itemBurden ~= nil) then
    report.ItemBurden = itemBurden
  end -- if

  if (weightReduction ~= nil) then
    report.WeightReduction = weightReduction
  end -- if

  if (int ~= nil) then
    report.Int = int
  end -- if

  if (wis ~= nil) then
    report.Wis = wis
  end -- if

  if (luck ~= nil) then
    report.Luck = luck
  end -- if

  if (str ~= nil) then
    report.Str = str
  end -- if

  if (dex ~= nil) then
    report.Dex = dex
  end -- if

  if (con ~= nil) then
    report.Con = con
  end -- if

  if (hp ~= nil) then
    report.HP = hp
  end -- if

  if (mana ~= nil) then
    report.Mana = mana
  end -- if

  if (moves ~= nil) then
    report.Moves = moves
  end -- if

  if (hit ~= nil) then
    report.Hit = hit
  end -- if

  if (dam ~= nil) then
    report.Dam = dam
  end -- if

  if (allphys ~= nil) then
    report.AllPhys = allphys
  end -- if

  if (allmagic ~= nil) then
    report.AllMagic = allmagic
  end -- if

  if (acid ~= nil) then
    report.Acid = acid
  end -- if

  if (cold ~= nil) then
    report.Cold = cold
  end -- if

  if (energy ~= nil) then
    report.Energy = energy
  end -- if

  if (holy ~= nil) then
    report.Holy = holy
  end -- if

  if (electric ~= nil) then
    report.Electric = electric
  end -- if

  if (negative ~= nil) then
    report.Negative = negative
  end -- if

  if (shadow ~= nil) then
    report.Shadow = shadow
  end -- if

  if (magic ~= nil) then
    report.Magic = magic
  end -- if

  if (air ~= nil) then
    report.Air = air
  end -- if

  if (earth ~= nil) then
    report.Earth = earth
  end -- if

  if (fire ~= nil) then
    report.Fire = fire
  end -- if

  if (light ~= nil) then
    report.Light = light
  end -- if

  if (mental ~= nil) then
    report.Mental = mental
  end -- if

  if (sonic ~= nil) then
    report.Sonic = sonic
  end -- if

  if (water ~= nil) then
    report.Water = water
  end -- if

  if (poison ~= nil) then
    report.Poison = poison
  end -- if

  if (disease ~= nil) then
    report.Disease = disease
  end -- if

  if (slash ~= nil) then
    report.Slash = slash
  end -- if

  if (pierce ~= nil) then
    report.Pierce = pierce
  end -- if

  if (bash ~= nil) then
    report.Bash = bash
  end -- if

  if (avedam ~= nil) then
    report.AveDam = avedam
  end -- if

  if (tmpAvedam ~= nil) then
    report.tempAveDam = tmpAvedam
  end -- if

  if (tmpHR ~= nil) then
    report.tmpHit = tmpHR
  end -- if

  if (tmpDR ~= nil) then
    report.tmpDam = tmpDR
  end -- if

  if (tmpInt ~= nil) then
    report.tmpInt = tmpInt
  end -- if

  if (tmpWis ~= nil) then
    report.tmpWis = tmpWis
  end -- if

  if (tmpLuck ~= nil) then
    report.tmpLuck = tmpLuck
  end -- if

  if (tmpStr ~= nil) then
    report.tmpStr = tmpStr
  end -- if

  if (tmpDex ~= nil) then
    report.tmpDex = tmpDex
  end -- if

  if (tmpCon ~= nil) then
    report.tmpCon = tmpCon
  end -- if

  if (inflicts ~= nil) then
    report.Inflicts = inflicts
  end -- if

  if (damtype ~= nil) then
    report.DamType = damtype
  end -- if

  if (weaponType ~= nil) then
    report.WeaponType = weaponType
  end -- if

  if (specials ~= nil) then
    report.Specials = specials
  end -- if
  
	AddTimer ("makeidoutput", 0, 0, .2, "", timer_flag.Enabled + timer_flag.OneShot, "makeOutput") 
end --end infocap

function makeEnchantmentstuff()
if not string.find(report.Flags, "solidified") then
			if not string.find(report.Flags, "invis") then
				report.enchantingSolid = "@RS@w"
				report.enchantingSolidno = "S"
				if report.enchanting == nil then
					report.enchanting = "@RS@w"
				else
					report.enchanting = report.enchanting .. "@RS@w"
				end
			else
				report.enchantingSolid = "@GS@w"
				report.enchantingSolidyes = "S"
				if report.enchanting == nil then
					report.enchanting = "@GS@w"
				else
					report.enchanting = report.enchanting .. "@GS@w"
				end
			end
		end
		if not string.find(report.Flags, "resonated") then
			if string.find(report.Flags, "hum") then
				report.enchantingReso = "@GR@w"
				report.enchantingResoyes = "R"
				if report.enchanting == nil then
					report.enchanting = "@RR@W"
				else
					report.enchanting = report.enchanting .. "@RR@W"
				end
			else
				report.enchantingReso = "@RR@w"
				report.enchantingResono = "R"
				if report.enchanting == nil then
					report.enchanting = "@GR@W"
				else
					report.enchanting = report.enchanting .. "@GR@W"
				end
			end
		end
		if not string.find(report.Flags, "illuminated") then
				report.enchantingIllum = "@GI@w"
				report.enchantingIllumyes = "I"
			if string.find(report.Flags, "glow") then
				if report.enchanting == nil then
					report.enchanting = "@RI@W"
				else
					report.enchanting = report.enchanting .. "@RI@W"
				end
			else
				report.enchantingIllum = "@RI@w"
				report.enchantingIllumno = "I"
				if report.enchanting == nil then
					report.enchanting = "@GI@W"
				else
					report.enchanting = report.enchanting .. "@GI@W"
				end
			end
		end
end


function makeOutput()
		local msg = interp(idreport.output,{
		  id = report.Id
		, name = report.coloredname
		, lvl = report.Level
		, weight = report.Weight
		, wearable = report.Wearable
		, score = report.Score
		, keywords = report.Keywords
		, type = report.Type
		, worth = report.Worth
		, totalstat = report.totalstats
		, material = report.Material
		, affmod = report.AffectMods
		, foundat = report.FoundAt
		, spelluse = report.spellsUses
		, spellname = report.spellsName
		, spelllevel = report.spellsLevel
		, leadsto = report.LeadsTo
		, capacity = report.Capacity
		, holding = report.Holding
		, heavyitem = report.HeaviestItem
		, itemsinside = report.ItemsInside
		, totweight = report.TotWeight
		, itemburden = report.ItemBurden
		, weightred = report.WeightReduction
		, clan = report.Clan
		, int = report.Int
		, wis = report.Wis
		, dex = report.Dex
		, con = report.Con
		, luck = report.Luck
		, hp = report.HP
		, mana = report.Mana
		, move = report.Moves
		, hr = report.Hit
		, dr = report.Dam
		, allphys = report.AllPhys
		, allmagic = report.AllMagic
		, tempint = report.tmpInt
		, tempwis = report.tmpWis
		, tempdex = report.tmpDex
		, tempcon = report.tmpCon
		, templuck = report.tmpLuck
		, inflicts = report.Inflicts
		, damtype = report.DamType
		, weaponyype = report.WeaponType
		, specials = report.Specials
		, flagsall = report.Flags
		, flagsenchant = report.enchanting
		, acid = report.Acid
		, cold = report.Cold
		, energy = report.Energy
		, holy = report.Holy
		, electric = report.Electric
		, negative = report.Negative
		, shadow = report.Shadow
		, magic = report.Magic
		, air = report.Air
		, earth = report.Earth
		, fire = report.Fire
		, light = report.Light
		, mental = report.Mental
		, sonic = report.Sonic
		, water = report.Water
		, poison = report.Poison
		, disease = report.Disease
		, slash = report.Slash
		, pierce = report.Pierce
		, bash = report.Bash
		, avedam = report.AveDam
		, tmpAvedam = report.tempAveDam
		, enchantsolid = report.enchantingSolid
		, enchantsolidyes = report.enchantSolidyes
		, enchantsolidno = report.enchantSolidno
		, enchantreso = report.enchantingReso
		, enchantresoyes = report.enchantResoyes
		, enchantresono = report.enchantResono
		, enchantillum = report.enchantingIllum
		, enchantillumyes = report.enchantIllumyes
		, enchantillumno = report.enchantIllumno

	})
		
	if tonumber(idreport.currentid)<=tonumber(idreport.maxid) then
		
		if tonumber(idreport.bidnum) > 0 then	
			idreport[idreport.currentid] = "[BID:".. idreport.bidnum.."] "..msg
		elseif tonumber(idreport.rbidnum) > 0 then
			idreport[idreport.currentid] = "[RBID:".. idreport.bidnum.."] "..msg
		else
			idreport[idreport.currentid] = msg
		end
		idreport.currentid = tonumber(idreport.currentid)+1
	else
		if tonumber(idreport.bidnum) > 0 then	
			idreport[1] = "[BID:".. idreport.bidnum.."] "..msg
		else
			idreport[1] = msg
		end
		idreport.currentid = 2
	end
	
	
	if tonumber(idreport.bidnum) > 0 then	
		SendSpecial(idreport.channel .. " [BID:".. idreport.bidnum.."] " .. msg)
	elseif tonumber(idreport.rbidnum) > 0 then
		SendSpecial(idreport.channel .. " [RBID:".. idreport.rbidnum.."] " .. msg)
	else
		SendSpecial(idreport.channel .. " " .. msg)
	end

	idreport.bidnum = 0
	EnableTriggerGroup("idCap", false)
	report = {}
end--end makeOutput()

function showid(name, line, wildcards)
local one = wildcards[1]
local two = wildcards[2]
local showidchannel = "echo"

if two ~= nil and two ~= " " and two ~= "" then
	showidchannel = two
end

	if one == "all" then
		for i,v in pairs(idreport) do
			if tonumber(i) and tonumber(i) <= tonumber(idreport.maxid) then
				SendSpecial("echo @WID: "..i.." Has data: @C".. v)
			end
		end
	elseif tonumber(one) >= 1  and tonumber(one) <= idreport.maxid then
		if idreport[tonumber(one)] ~= nil then
			SendSpecial(showidchannel .. " " .. idreport[tonumber(one)])
		else
			print("that does not exist, please try a different number")
		end
	else
		print("Please enter a valid answer, either all or a number between 1 and " .. idreport.maxid)
	end
end

function setreportchannel(name, line, wildcards)
	if wildcards[1] ~= nil and wildcards[1] ~= "" and wildcards[1] ~= " " then
		idreport.channel = wildcards[1]
		ColourNote("Teal","","Level Report channel set to "..idreport.channel)
	else
		ColourNote("Teal","","To set channel please do idchannel <channelname>")
	end
end

function beannoying(rawr)
	rawr = rawr:gsub("%s+", ",")
	if idreport.annoying == "yes" and isinList(rawr) then
		Sound("ding.wav")
		DoAfterSpecial(0.5, 'Sound("ding.wav")', sendto.script)
		DoAfterSpecial(1, 'Sound("ding.wav")', sendto.script)
		FlashIcon()
		DoAfterSpecial(0.5, 'FlashIcon()', sendto.script)
		DoAfterSpecial(1, 'FlashIcon()', sendto.script)
	end
end

function toggleannoying()
	if idreport.annoying == "yes" then
		idreport.annoying = "no"
		SendSpecial("echo @CTrigger Matching turned: @ROFF@w")
	else
		idreport.annoying = "yes"
		SendSpecial("echo @CTrigger Matching turned: @GON@w")
	end
end

function setreportwords()
	local HadarBackup = idreport["callout"]
	idreport["callout"] = utils.inputbox ("Please put trigger words here to activate beeping\nplease seperate words with a comma \",\"", "Set trigger words", idreport["callout"], "Courier", 9)
	if idreport["callout"] ~= nil then
		SendNoEcho("echo beep trigger words are: "..idreport["callout"])
	else
		idreport["callout"] = HadarBackup
	end
	SaveState()
end

function isinList(str)
	if idreport["callout"] == nil or idreport["callout"] == "" or idreport["callout"] == " " then
		print("please add a word, or words to your trigger (idwords)")
		return
	end
	for i,v in pairs(asplit(idreport["callout"])) do
		if string.find(string.lower(str),string.lower(v)) then
			return true
		end	
	end
end

function asplit (input)
		sep = ","
        local t={}
        for str in string.gmatch(input, "([^"..sep.."]+)") do
                table.insert(t, str)
        end
        return t
end

function setOutput()
	local HadarBackup = idreport.output
	idreport.output = utils.inputbox ("This has a ton of variables, i suggest looking at hid help and going to the website","Look of hadars Identification", idreport.output, "Courier", 9)
	if HadarDoubleString ~= nil then
		SendNoEcho("echo id report has the following format: "..idreport.output)
	else
		idreport.output = HadarBackup
	end
	SaveState()
end

function toggleAutoID()
	if idreport.autoid == "yes" then
		idreport.autoid = "no"
		SendSpecial("echo @CAuto-ID turned: @ROFF@w")
	else
		idreport.autoid = "yes"
		SendSpecial("echo @CAuto-ID turned: @GON@w")
	end
end

function autoidenta(name, line, wildcards)
	if idreport.autoid == "yes" then
		EnableTriggerGroup("idCap", true)
		idreport.bidnum = wildcards[1]
		SendSpecial("bid "..idreport.bidnum)
	end
end

function autoidentr(name, line, wildcards)
	if idreport.autoid == "yes" then
		EnableTriggerGroup("idCap", true)
		idreport.rbidnum = wildcards[1]
		SendSpecial("rbid "..idreport.rbidnum)
	end
end

function idmax(name, line, wildcards)
	if tonumber(wildcards[1]) then
		idreport.maxid = wildcards[1]
	else
		print("please input a valid number")
	end
end


function HadarHelp()
	ColourNote("#159FE5","","+--------------------------------------------------","Green","","[","Cyan","","I","Teal","","dentify","Green","","]","#159FE5","","--------------------------------------------------+")
	ColourNote("#159FE5","","|"..string.format("%-99s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," id <item> <paramaters>"),"#159FE5","","-","#F1D566","",string.format("%-68s"," activates the script and IDs the items."),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idchannel <channel>"),"#159FE5","","-","#F1D566","",string.format("%-68s"," set channel for default reporting"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idauto"),"#159FE5","","-","#F1D566","",string.format("%-68s"," toggles auto identifing bids and rauction"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idbeeps"),"#159FE5","","-","#F1D566","",string.format("%-68s"," toggles trigger words for beeps/icon flashing"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idwords"),"#159FE5","","-","#F1D566","",string.format("%-68s"," lets you make a list of words for idbeeps"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idshow <number/all> <channel>"),"#159FE5","","-","#F1D566","",string.format("%-68s"," lets you see past ids use with"),"#159FE5","","|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," idsetmax to change max ids in history, all shows all the IDS"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idsetmax <number>"),"#159FE5","","-","#F1D566","",string.format("%-68s"," change the max ids to keep in history, default is 20"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-30s"," idset"),"#159FE5","","-","#F1D566","",string.format("%-68s"," will let you hadarmagic the output, type idsethelp for a helpfile with all variables"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%99s"," if any issues arise, please contact Hadar via a personal note! or on discord zzyzzyzzx#0001"),"#159FE5","","|")
	ColourNote("#159FE5","","+"..string.rep("-",109).."+")
end

function hadarhelptwo()
	ColourNote("#159FE5","","+-------------------------------------","Green","","[","Cyan","","I","Teal","","dentify","Cyan",""," S","Teal","","et","Green","","]","#159FE5","","-------------------------------------+")
	ColourNote("#159FE5","","|","#E55B15","",string.format("%-23s"," idset"),"#159FE5","","-","#F1D566","",string.format("%-68s"," will let you hadarmagic the output, type idsethelp for a helpfile with all variables"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," to use a variable just do it like this: ${variable}"),"#159FE5","","|")
	ColourNote("#159FE5","","|","white","",string.format("%84s","EG: ${name} will display item name, you can also do something like this:"),"#159FE5","","|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," ${Name:|name} or ${name|:Name} ... will auto hide the field when not in use"),"#159FE5","","|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|"..string.format("%92s"," ").."|")
	ColourNote("#159FE5","","|","white","",string.format("%84s"," the variables are as follows"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," id"),"#159FE5","","-","#e62e00","",string.format("%-68s"," id number of the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," name"),"#159FE5","","-","#cc6600","",string.format("%-68s"," name of the item (in color)"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," lvl"),"#159FE5","","-","#e62e00","",string.format("%-68s"," the level of the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," weight"),"#159FE5","","-","#cc6600","",string.format("%-68s"," total weight of the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," wearable"),"#159FE5","","-","#e62e00","",string.format("%-68s"," location item can be worn"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," score"),"#159FE5","","-","#cc6600","",string.format("%-68s"," the score of an item based off your settings"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," keywords"),"#159FE5","","-","#e62e00","",string.format("%-68s"," item keywords"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," type"),"#159FE5","","-","#cc6600","",string.format("%-68s"," what is the type of item (eg armor, weapon, scroll)"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," worth"),"#159FE5","","-","#e62e00","",string.format("%-68s"," total cost of the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," totalstat"),"#159FE5","","-","#cc6600","",string.format("%-68s"," total stats of the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," material"),"#159FE5","","-","#e62e00","",string.format("%-68s"," what the material is made out of"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," affmod"),"#159FE5","","-","#cc6600","",string.format("%-68s"," the modifiers affecting the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," foundat"),"#159FE5","","-","#e62e00","",string.format("%-68s"," what area the item is from"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," spelluse"),"#159FE5","","-","#cc6600","",string.format("%-68s"," what the first spell on a potion/scroll does"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," spellname"),"#159FE5","","-","#e62e00","",string.format("%-68s"," name of the first spell on a potion/scroll"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," spelllevel"),"#159FE5","","-","#cc6600","",string.format("%-68s"," level of the first spell on a potion/scroll"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," leadsto"),"#159FE5","","-","#e62e00","",string.format("%-68s"," where a portal goes"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," capacity"),"#159FE5","","-","#cc6600","",string.format("%-68s"," max amount of items the container can hold"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," holding"),"#159FE5","","-","#e62e00","",string.format("%-68s"," how many items that are in the container"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," heavyitem"),"#159FE5","","-","#cc6600","",string.format("%-68s"," heaviest item in the container"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," itemsinside"),"#159FE5","","-","#e62e00","",string.format("%-68s"," how many items in a container"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," totweight"),"#159FE5","","-","#cc6600","",string.format("%-68s"," total weight of the container"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," itemburden"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows how many items are in a container"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," weightred"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows weight reduction from a container"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," clan"),"#159FE5","","-","#e62e00","",string.format("%-68s"," reports what clan its from"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," int"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows Strength on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," wis"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows Wisdom on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," dex"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows Dexterity on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," con"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows Constitution stat on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," luck"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows Luck on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," hp"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows additional health points added from an item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," mana"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows additional mana added from an item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," move"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows additional moves added from an item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," hr"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows hit roll of an item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," dr"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows damage roll of an item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," allphys"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows resistance for all physical attacks"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," allmagic"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows resistance for all magic attacks"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," tempint"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows temporary Strength on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," tempwis"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows temporary Wisdom on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," tempdex"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows temporary Dexterity on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," tempcon"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows temporary Constitution stat on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," templuck"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows temporary Luck on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," inflicts"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows temporary what the weapon inflicts"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," damtype"),"#159FE5","","-","#cc6600","",string.format("%-68s"," shows the damage type of a weapon"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," weaponyype"),"#159FE5","","-","#e62e00","",string.format("%-68s"," reports a wepons type"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," specials"),"#159FE5","","-","#cc6600","",string.format("%-68s"," reports a special flag on a weapon"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," flagsall"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows all flags on the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," flagsenchant"),"#159FE5","","-","#cc6600","",string.format("%-68s"," only shows enchanting flags"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," <resistance name>"),"#159FE5","","-","#e62e00","",string.format("%-68s"," shows resistance of an item just use its name, EG bash or pierce"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," avedam"),"#159FE5","","-","#cc6600","",string.format("%-68s"," reports a weapons average damage"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," tmpAvedam"),"#159FE5","","-","#e62e00","",string.format("%-68s"," reports an average damage that is temperary(like temper)"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," enchantsolid"),"#159FE5","","-","#cc6600","",string.format("%-68s"," pre colors the item based on solidify green for go red for no"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," enchantsolidyes"),"#159FE5","","-","#e62e00","",string.format("%-68s"," lets you color your own solidify if you can solidify the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," enchantsolidno"),"#159FE5","","-","#cc6600","",string.format("%-68s"," lets you color your own solidify if you cant solidify the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," enchantreso"),"#159FE5","","-","#e62e00","",string.format("%-68s"," pre colors the item based on resonating green for go red for no"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," enchantresoyes"),"#159FE5","","-","#cc6600","",string.format("%-68s"," lets you color your own resonate if you can resonate the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," enchantresono"),"#159FE5","","-","#e62e00","",string.format("%-68s"," lets you color your own resonate if you cant resonate the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," enchantillum"),"#159FE5","","-","#cc6600","",string.format("%-68s"," pre colors the item based on illumination either green for go or red for no"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#47d147","",string.format("%-23s"," enchantillumyes"),"#159FE5","","-","#e62e00","",string.format("%-68s"," lets you color your own illumination if you can illuminate the item"),"#159FE5","","|")
	ColourNote("#159FE5","","|","#009900","",string.format("%-23s"," enchantillumno"),"#159FE5","","-","#cc6600","",string.format("%-68s"," lets you color your own illumination if you cant illuminate the item"),"#159FE5","","|")
end

]]>
</script> 

</muclient>
